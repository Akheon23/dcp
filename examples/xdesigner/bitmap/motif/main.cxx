/*
** Generated by X-Designer
*/
/*
**LIBS: -lXm -lXt -lX11
*/

#include <stdio.h>
#include <stdlib.h>
#include <X11/Xatom.h>
#include <X11/Intrinsic.h>
#include <X11/Shell.h>

#include <Xm/Xm.h>
#include <Xm/RepType.h>
#include <X11/StringDefs.h>
#include <Xm/CascadeB.h>
#include <Xm/DialogS.h>
#include <Xm/DrawingA.h>
#include <Xm/Form.h>
#include <Xm/PushB.h>
#include <Xm/RowColumn.h>
#include <Xm/Separator.h>
#include <Xm/ToggleB.h>
#include <Xm/ToggleBG.h>


#include "main.h"


shell_p shell = (shell_p) NULL;


static int _xd_initialised = 0 ;

typedef struct PixelResources_s { 
	Pixel magenta;
	Pixel cyan;
	Pixel yellow;
	Pixel blue;
	Pixel green;
	Pixel red;
	Pixel white;
	Pixel black;
} PixelResources_t, *PixelResources_p;

static PixelResources_t pixel_resources;


static void initialise_objects(Widget parent)
{
	XrmValue     from_value, to_value; /* For resource conversions */

	if (_xd_initialised) {
		return ;
	}

	_xd_initialised = 1;

	while (XtParent(parent)) {
		parent = XtParent(parent);
	}

	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(XtDisplay(parent))) != 1) {
	from_value.addr = "#ffff0000ffff";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.magenta = *(Pixel*)to_value.addr;
	from_value.addr = "#0000ffffffff";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.cyan = *(Pixel*)to_value.addr;
	from_value.addr = "#ffffffff0000";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.yellow = *(Pixel*)to_value.addr;
	from_value.addr = "#00000000ffff";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.blue = *(Pixel*)to_value.addr;
	from_value.addr = "#0000ffff0000";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.green = *(Pixel*)to_value.addr;
	from_value.addr = "#ffff00000000";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.red = *(Pixel*)to_value.addr;
	from_value.addr = "#ffffffffffff";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.white = *(Pixel*)to_value.addr;
	from_value.addr = "#000000000000";
	from_value.size = strlen(from_value.addr)+1;
	to_value.addr = NULL;
	XtConvertAndStore( parent, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
		pixel_resources.black = *(Pixel*)to_value.addr;
	}
}


void drawing_c::create (CWnd * parent, char *widget_name, unsigned int , CRect *)
{
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */

	if ( !widget_name )
		widget_name = (char *) "drawing";

	colours[black]=&pixel_resources.black;
	colours[white]=&pixel_resources.white;
	colours[red]=&pixel_resources.red;
	colours[green]=&pixel_resources.green;
	colours[blue]=&pixel_resources.blue;
	colours[yellow]=&pixel_resources.yellow;
	colours[cyan]=&pixel_resources.cyan;
	colours[magenta]=&pixel_resources.magenta;
	initialised = FALSE;    
	for ( unsigned char y = 0; y < 32; y++ )
		for ( unsigned char x = 0; x < 32; )
			for ( unsigned char c = (unsigned char)black; c <= (unsigned char)magenta; c++, x++ )
				cells [x][y] = (colour_type)c; 


	XtSetArg(al[ac], XmNwidth, 250); ac++;
	XtSetArg(al[ac], XmNheight, 250); ac++;
	xd_rootwidget ( XmCreateDrawingArea ( parent->xd_rootwidget(), widget_name, al, ac ) );
	ac = 0;
	XtAddCallback (xd_rootwidget(), XmNexposeCallback, &drawing_c::DoExpose, (XtPointer) this);
	XtAddCallback (xd_rootwidget(), XmNinputCallback, &drawing_c::DoInput, (XtPointer) this);
}

void drawing_c::DoInput( Widget, XtPointer client_data, XtPointer call_data )
{
	drawing_p instance = (drawing_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->DoInput (  );
}

void drawing_c::DoExpose( Widget, XtPointer client_data, XtPointer call_data )
{
	drawing_p instance = (drawing_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->DoExpose (  );
}

void tool_box_c::create (CWnd * parent, char *widget_name, unsigned int , CRect *)
{
	Widget children[4];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */

	if ( !widget_name )
		widget_name = (char *) "tool_box";

tool = pencil;
	XtSetArg(al[ac], XmNnumColumns, 2); ac++;
	XtSetArg(al[ac], XmNpacking, XmPACK_COLUMN); ac++;
	xd_rootwidget ( XmCreateRadioBox ( parent->xd_rootwidget(), widget_name, al, ac ) );
	ac = 0;
	xmstrings[0] = XmStringGenerate ( "Pencil", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNset, XmSET); ac++;
	toggle1->xd_rootwidget ( XmCreateToggleButtonGadget ( xd_rootwidget(), (char *) "toggle1", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringGenerate ( "Line", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	toggle2->xd_rootwidget ( XmCreateToggleButtonGadget ( xd_rootwidget(), (char *) "toggle2", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringGenerate ( "Rect", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	toggle3->xd_rootwidget ( XmCreateToggleButtonGadget ( xd_rootwidget(), (char *) "toggle3", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringGenerate ( "Fill", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	toggle4->xd_rootwidget ( XmCreateToggleButtonGadget ( xd_rootwidget(), (char *) "toggle4", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtAddCallback (toggle1->xd_rootwidget(), XmNvalueChangedCallback, &tool_box_c::Pencil, (XtPointer) this);
	XtAddCallback (toggle2->xd_rootwidget(), XmNvalueChangedCallback, &tool_box_c::Line, (XtPointer) this);
	XtAddCallback (toggle3->xd_rootwidget(), XmNvalueChangedCallback, &tool_box_c::Rectangle, (XtPointer) this);
	XtAddCallback (toggle4->xd_rootwidget(), XmNvalueChangedCallback, &tool_box_c::Fill, (XtPointer) this);
	if ((children[ac] = toggle1->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle2->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle3->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle4->xd_rootwidget()) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
}

tool_box_c::tool_box_c()
{
	toggle1 = new CButton;
	toggle2 = new CButton;
	toggle3 = new CButton;
	toggle4 = new CButton;
}

tool_box_c::~tool_box_c()
{
	delete toggle1;
	delete toggle2;
	delete toggle3;
	delete toggle4;
}

void tool_box_c::Fill( Widget, XtPointer client_data, XtPointer call_data )
{
	tool_box_p instance = (tool_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Fill (  );
}

void tool_box_c::Rectangle( Widget, XtPointer client_data, XtPointer call_data )
{
	tool_box_p instance = (tool_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Rectangle (  );
}

void tool_box_c::Line( Widget, XtPointer client_data, XtPointer call_data )
{
	tool_box_p instance = (tool_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Line (  );
}

void tool_box_c::Pencil( Widget, XtPointer client_data, XtPointer call_data )
{
	tool_box_p instance = (tool_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Pencil (  );
}

void colour_box_c::create (CWnd * parent, char *widget_name, unsigned int , CRect *)
{
	Widget children[8];      /* Children to manage */
	Display *display = XtDisplay ( parent->xd_rootwidget() );
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XrmValue from_value, to_value; /* For resource conversion */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */

	if ( !widget_name )
		widget_name = (char *) "colour_box";

colour = black;
	XtSetArg(al[ac], XmNnumColumns, 2); ac++;
	XtSetArg(al[ac], XmNpacking, XmPACK_COLUMN); ac++;
	XtSetArg(al[ac], XmNradioBehavior, TRUE); ac++;
	xd_rootwidget ( XmCreateRowColumn ( parent->xd_rootwidget(), widget_name, al, ac ) );
	ac = 0;
	XtSetArg(al[ac], XmNforeground, pixel_resources.white); ac++;
	XtSetArg(al[ac], XmNbackground, pixel_resources.black); ac++;
	xmstrings[0] = XmStringGenerate ( "Black", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	XtSetArg(al[ac], XmNset, XmSET); ac++;
	toggle5->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle5", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNbackground, pixel_resources.white); ac++;
	xmstrings[0] = XmStringGenerate ( "White", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	toggle6->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle6", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNbackground, pixel_resources.red); ac++;
	xmstrings[0] = XmStringGenerate ( "Red", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	toggle7->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle7", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNbackground, pixel_resources.green); ac++;
	xmstrings[0] = XmStringGenerate ( "Green", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	toggle8->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle8", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNforeground, pixel_resources.white); ac++;
	XtSetArg(al[ac], XmNbackground, pixel_resources.blue); ac++;
	xmstrings[0] = XmStringGenerate ( "Blue", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	toggle9->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle9", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNbackground, pixel_resources.yellow); ac++;
	xmstrings[0] = XmStringGenerate ( "Yellow", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	toggle10->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle10", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNbackground, pixel_resources.cyan); ac++;
	xmstrings[0] = XmStringGenerate ( "Cyan", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	toggle11->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle11", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNbackground, pixel_resources.magenta); ac++;
	xmstrings[0] = XmStringGenerate ( "Magenta", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNindicatorType, XmONE_OF_MANY); ac++;
	toggle12->xd_rootwidget ( XmCreateToggleButton ( xd_rootwidget(), (char *) "toggle12", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtAddCallback (toggle5->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::Black, (XtPointer) this);
	XtAddCallback (toggle6->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::White, (XtPointer) this);
	XtAddCallback (toggle7->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::Red, (XtPointer) this);
	XtAddCallback (toggle8->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::Green, (XtPointer) this);
	XtAddCallback (toggle9->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::Blue, (XtPointer) this);
	XtAddCallback (toggle10->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::Yellow, (XtPointer) this);
	XtAddCallback (toggle11->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::Cyan, (XtPointer) this);
	XtAddCallback (toggle12->xd_rootwidget(), XmNvalueChangedCallback, &colour_box_c::Magenta, (XtPointer) this);
	if ((children[ac] = toggle5->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle6->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle7->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle8->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle9->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle10->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle11->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toggle12->xd_rootwidget()) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
}

colour_box_c::colour_box_c()
{
	toggle5 = new CButton;
	toggle6 = new CButton;
	toggle7 = new CButton;
	toggle8 = new CButton;
	toggle9 = new CButton;
	toggle10 = new CButton;
	toggle11 = new CButton;
	toggle12 = new CButton;
}

colour_box_c::~colour_box_c()
{
	delete toggle5;
	delete toggle6;
	delete toggle7;
	delete toggle8;
	delete toggle9;
	delete toggle10;
	delete toggle11;
	delete toggle12;
}

void colour_box_c::Magenta( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Magenta (  );
}

void colour_box_c::Cyan( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Cyan (  );
}

void colour_box_c::Yellow( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Yellow (  );
}

void colour_box_c::Blue( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Blue (  );
}

void colour_box_c::Green( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Green (  );
}

void colour_box_c::Red( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Red (  );
}

void colour_box_c::White( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->White (  );
}

void colour_box_c::Black( Widget, XtPointer client_data, XtPointer call_data )
{
	colour_box_p instance = (colour_box_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->Black (  );
}

void shell_c::create (CWinApp *win_app, CRect *)
{
	Widget children[3];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XrmValue from_value, to_value; /* For resource conversion */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	CWnd form1;
	Widget menu1 = (Widget)NULL;
	Widget button1 = (Widget)NULL;
	Widget button2 = (Widget)NULL;
	Widget button3 = (Widget)NULL;
	Widget menu2 = (Widget)NULL;
	Widget button4 = (Widget)NULL;
	Widget button5 = (Widget)NULL;
	Widget button6 = (Widget)NULL;
	CWnd rowcol1;
	Widget separator1 = (Widget)NULL;

	if ( !win_app->xd_app_class() )
	win_app->xd_app_class ( (char *) "XApplication" );

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	XtSetArg(al[ac], XmNargc, win_app->xd_argc()); ac++;
	XtSetArg(al[ac], XmNargv, win_app->xd_argv()); ac++;
	xd_rootwidget ( XtAppCreateShell(win_app->m_pszAppName, win_app->xd_app_class(), sessionShellWidgetClass, win_app->xd_display(), al, ac) );

	ac = 0;
	initialise_objects ( xd_rootwidget() );
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	form1.xd_rootwidget( XmCreateForm ( xd_rootwidget(), (char *) "form1", al, ac ) );
	ac = 0;
	menuBar1->xd_rootwidget ( XmCreateMenuBar ( form1.xd_rootwidget(), (char *) "menuBar1", al, ac ) );
	xmstrings[0] = XmStringGenerate ( "File", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "F" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menuBar1->xd_rootwidget(), XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	cascade1->xd_rootwidget ( XmCreateCascadeButton ( menuBar1->xd_rootwidget(), (char *) "cascade1", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	menu1 = XmCreatePulldownMenu ( menuBar1->xd_rootwidget(), (char *) "menu1", al, ac );
	xmstrings[0] = XmStringGenerate ( "New", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "N" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menu1, XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	XtSetArg(al[ac], XmNaccelerator, "Ctrl<Key>N"); ac++;
	xmstrings[1] = XmStringGenerate ( "Ctrl + N", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNacceleratorText, xmstrings[1]); ac++;
	button1 = XmCreatePushButton ( menu1, (char *) "button1", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XmStringFree ( xmstrings [ 1 ] );
	cascade1->xd_register_menu_item ( ID_shell_button1, button1 );
	xmstrings[0] = XmStringGenerate ( "Open", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "O" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menu1, XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	XtSetArg(al[ac], XmNaccelerator, "Ctrl<Key>O"); ac++;
	xmstrings[1] = XmStringGenerate ( "Ctrl + O", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNacceleratorText, xmstrings[1]); ac++;
	button2 = XmCreatePushButton ( menu1, (char *) "button2", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XmStringFree ( xmstrings [ 1 ] );
	cascade1->xd_register_menu_item ( ID_shell_button2, button2 );
	xmstrings[0] = XmStringGenerate ( "Exit", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "E" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menu1, XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	XtSetArg(al[ac], XmNaccelerator, "Ctrl<Key>E"); ac++;
	xmstrings[1] = XmStringGenerate ( "Ctrl + E", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNacceleratorText, xmstrings[1]); ac++;
	button3 = XmCreatePushButton ( menu1, (char *) "button3", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XmStringFree ( xmstrings [ 1 ] );
	cascade1->xd_register_menu_item ( ID_shell_button3, button3 );
	menuBar1->xd_register_menu ( cascade1 );
	menuBar1->xd_register_menu_item ( IDC_shell_cascade1, cascade1->xd_rootwidget() );
	xmstrings[0] = XmStringGenerate ( "Edit", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "E" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menuBar1->xd_rootwidget(), XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	cascade2->xd_rootwidget ( XmCreateCascadeButton ( menuBar1->xd_rootwidget(), (char *) "cascade2", al, ac ) );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	menu2 = XmCreatePulldownMenu ( menuBar1->xd_rootwidget(), (char *) "menu2", al, ac );
	xmstrings[0] = XmStringGenerate ( "Cut", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "C" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menu2, XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	XtSetArg(al[ac], XmNaccelerator, "<Key>osfCut"); ac++;
	xmstrings[1] = XmStringGenerate ( "<Keypad>Cut", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNacceleratorText, xmstrings[1]); ac++;
	button4 = XmCreatePushButton ( menu2, (char *) "button4", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XmStringFree ( xmstrings [ 1 ] );
	cascade2->xd_register_menu_item ( ID_shell_button4, button4 );
	xmstrings[0] = XmStringGenerate ( "Copy", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "y" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menu2, XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	XtSetArg(al[ac], XmNaccelerator, "<Key>osfCopy"); ac++;
	xmstrings[1] = XmStringGenerate ( "<Keypad>Copy", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNacceleratorText, xmstrings[1]); ac++;
	button5 = XmCreatePushButton ( menu2, (char *) "button5", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XmStringFree ( xmstrings [ 1 ] );
	cascade2->xd_register_menu_item ( ID_shell_button5, button5 );
	xmstrings[0] = XmStringGenerate ( "Paste", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	from_value.addr = "P" ;
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (menu2, XmRString, &from_value, XmRKeySym, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNmnemonic, (*((KeySym*) to_value.addr))); ac++;
	}
	XtSetArg(al[ac], XmNaccelerator, "<Key>osfPaste"); ac++;
	xmstrings[1] = XmStringGenerate ( "<Keypad>Paste", XmFONTLIST_DEFAULT_TAG, XmCHARSET_TEXT, NULL );
	XtSetArg(al[ac], XmNacceleratorText, xmstrings[1]); ac++;
	button6 = XmCreatePushButton ( menu2, (char *) "button6", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XmStringFree ( xmstrings [ 1 ] );
	cascade2->xd_register_menu_item ( ID_shell_button6, button6 );
	menuBar1->xd_register_menu ( cascade2 );
	menuBar1->xd_register_menu_item ( IDC_shell_cascade2, cascade2->xd_rootwidget() );
	drawing->create ( &form1, (char *) "drawing" );
	rowcol1.xd_rootwidget( XmCreateRowColumn ( form1.xd_rootwidget(), (char *) "rowcol1", al, ac ) );
	tool_box->create ( &rowcol1, (char *) "tool_box" );
	separator1 = XmCreateSeparator ( rowcol1.xd_rootwidget(), (char *) "separator1", al, ac );
	colour_box->create ( &rowcol1, (char *) "colour_box" );


	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, 5); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 5); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightOffset, 5); ac++;
	XtSetValues ( menuBar1->xd_rootwidget(),al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopOffset, 5); ac++;
	XtSetArg(al[ac], XmNtopWidget, menuBar1->xd_rootwidget()); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNbottomOffset, 5); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftOffset, 5); ac++;
	XtSetArg(al[ac], XmNleftWidget, rowcol1.xd_rootwidget()); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightOffset, 5); ac++;
	XtSetValues ( drawing->xd_rootwidget(),al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopOffset, 5); ac++;
	XtSetArg(al[ac], XmNtopWidget, menuBar1->xd_rootwidget()); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 5); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
	XtSetValues ( rowcol1.xd_rootwidget(),al, ac );
	ac = 0;
	XtAddCallback (button3, XmNactivateCallback, &shell_c::DoExit, (XtPointer) this);
	if ((children[ac] = button1) != (Widget) 0) { ac++; }
	if ((children[ac] = button2) != (Widget) 0) { ac++; }
	if ((children[ac] = button3) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, menu1); ac++;
	XtSetValues(cascade1->xd_rootwidget(), al, ac );
	ac = 0;
	if ((children[ac] = button4) != (Widget) 0) { ac++; }
	if ((children[ac] = button5) != (Widget) 0) { ac++; }
	if ((children[ac] = button6) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, menu2); ac++;
	XtSetValues(cascade2->xd_rootwidget(), al, ac );
	ac = 0;
	if ((children[ac] = cascade1->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = cascade2->xd_rootwidget()) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if ((children[ac] = tool_box->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = separator1) != (Widget) 0) { ac++; }
	if ((children[ac] = colour_box->xd_rootwidget()) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if ((children[ac] = menuBar1->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = drawing->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = rowcol1.xd_rootwidget()) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if (form1.xd_rootwidget() != (Widget) 0) { XtManageChild ( form1.xd_rootwidget()); }
}

shell_c::shell_c()
{
	menuBar1 = new CMenu;
	cascade1 = new CMenu;
	cascade2 = new CMenu;
	drawing = new drawing_c;
	tool_box = new tool_box_c;
	colour_box = new colour_box_c;
}

shell_c::~shell_c()
{
	delete menuBar1;
	delete cascade1;
	delete cascade2;
	delete drawing;
	delete tool_box;
	delete colour_box;
}

void shell_c::DoExit( Widget, XtPointer client_data, XtPointer call_data )
{
	shell_p instance = (shell_p) client_data;
	instance->xd_call_data ( (XmAnyCallbackStruct *)call_data );
	instance->DoExit (  );
}


CXApplicationApp::CXApplicationApp ( const char *pszAppName )
	:CWinApp ( pszAppName )
{
}

BOOL CXApplicationApp::InitInstance ()
{
	BOOL base_return = CWinApp::InitInstance();
	shell = new shell_c;
	shell->create ( this );
	m_pMainWnd = shell;
	m_pMainWnd->ShowWindow ( m_nCmdShow );
	return TRUE;
}

int CXApplicationApp::ExitInstance ()
{
	return CWinApp::ExitInstance();
}

CXApplicationApp *XApplication;

/* Global Declarations */

XtAppContext app_context = (XtAppContext) 0 ;
Display     *display     = (Display *)    0 ;

int main(int argc, char **argv)
{

	/* Enable Localisation of the Application */

	XtSetLanguageProc((XtAppContext) 0, (XtLanguageProc) 0, (XtPointer) 0) ;

	/* Initialise the X Toolkit */

	XtToolkitInitialize ();

	/* Create a Global Application Context */

	app_context = XtCreateApplicationContext ();

	/* Open the Display */

	display = XtOpenDisplay(app_context, (String) 0, argv[0], "XApplication",
	                       (XrmOptionDescRec *) 0, 0,
	                       &argc, argv);
	if (display == (Display *) 0) {
		printf("%s: can't open display, exiting...\n", argv[0]);
		exit (-1);
	}
	XApplication = new CXApplicationApp ( argv[0] );
	XApplication->xd_display ( display );
	XApplication->xd_argc ( argc );
	XApplication->xd_argv ( argv );
	XApplication->xd_app_class ( "XApplication" );
	if ( !XApplication->InitInstance () )
	{
		printf("%s: failed to initialise application instance, exiting...\n", argv[0]);
		exit (-1);
	}

	/* Entering X Main Loop... */

	XtAppMainLoop (app_context);
	XApplication->ExitInstance ();
	delete XApplication;

	/* NOTREACHED */

	exit (0);
}

