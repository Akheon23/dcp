/*
** Generated by X-Designer
*/
#include <afxwin.h>
#include <afxext.h>
#include <afxcmn.h>


#include "main.h"

shell_p shell = (shell_p) NULL;

static int _xd_initialised = 0 ;

typedef struct PixelResources_s { 
	CBrush magenta;
	CBrush cyan;
	CBrush yellow;
	CBrush blue;
	CBrush green;
	CBrush red;
	CBrush white;
	CBrush black;
} PixelResources_t, *PixelResources_p;

static PixelResources_t pixel_resources;

static void initialise_objects( )
{

	if (_xd_initialised) {
		return ;
	}

	_xd_initialised = 1;

	CDC *dc = CWnd::GetDesktopWindow()->GetDC();
	pixel_resources.magenta.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 255, 0, 255 ) ) );
	pixel_resources.cyan.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 0, 255, 255 ) ) );
	pixel_resources.yellow.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 255, 255, 0 ) ) );
	pixel_resources.blue.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 0, 0, 255 ) ) );
	pixel_resources.green.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 0, 255, 0 ) ) );
	pixel_resources.red.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 255, 0, 0 ) ) );
	pixel_resources.white.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 255, 255, 255 ) ) );
	pixel_resources.black.CreateSolidBrush ( dc->GetNearestColor ( RGB ( 0, 0, 0 ) ) );
}


BEGIN_MESSAGE_MAP (drawing_c, CWnd)
//{{AFX_MSG_MAP(drawing_c)
ON_WM_PAINT()
ON_WM_LBUTTONDOWN()
ON_WM_LBUTTONUP()
ON_WM_ERASEBKGND()
//}}AFX_MSG_MAP
END_MESSAGE_MAP()

void drawing_c::create ( CWnd *parent, CWnd *root_dialog )
{
	CRect rect;
	rect.SetRect ( 159, 5, 415, 257 );
	int id = IDC_shell_drawing;
	char *widget_name = "drawing";

	colours[black]=&pixel_resources.black;
	colours[white]=&pixel_resources.white;
	colours[red]=&pixel_resources.red;
	colours[green]=&pixel_resources.green;
	colours[blue]=&pixel_resources.blue;
	colours[yellow]=&pixel_resources.yellow;
	colours[cyan]=&pixel_resources.cyan;
	colours[magenta]=&pixel_resources.magenta;
	initialised = FALSE;    
	for ( unsigned char y = 0; y < 32; y++ )
		for ( unsigned char x = 0; x < 32; )
			for ( unsigned char c = (unsigned char)black; c <= (unsigned char)magenta; c++, x++ )
				cells [x][y] = (colour_type)c; 


	Create( NULL, widget_name,WS_CHILD | WS_VISIBLE | WS_TABSTOP, rect, parent, id);
}

void drawing_c::AddChildItem (UINT nID, CWnd *parent)
{
	if (parent->GetSafeHwnd())
	{
		CWnd *pChildItem = parent->GetDlgItem(nID);
		if (pChildItem)
			pChildItem->SetParent(this);
	}
}

BOOL drawing_c::OnEraseBkgnd ( CDC *pDC )
{
	CRect rc;
	CRgn rgn;
	GetClientRect ( &rc );
	rgn.CreateRectRgnIndirect ( rc );
	pDC->PaintRgn ( &rgn );
	return TRUE;
}

BEGIN_MESSAGE_MAP (tool_box_c, CButton)
//{{AFX_MSG_MAP(tool_box_c)
ON_BN_CLICKED( IDC_tool_box_toggle1, OnValueChanged_toggle1 )
ON_BN_CLICKED( IDC_tool_box_toggle2, OnValueChanged_toggle2 )
ON_BN_CLICKED( IDC_tool_box_toggle3, OnValueChanged_toggle3 )
ON_BN_CLICKED( IDC_tool_box_toggle4, OnValueChanged_toggle4 )
//}}AFX_MSG_MAP
END_MESSAGE_MAP()

void tool_box_c::create ( CWnd *parent, CWnd *root_dialog )
{

tool = pencil;
	AddChildItem (IDC_tool_box_toggle1,root_dialog);
	toggle1=(CButton *) GetDlgItem (IDC_tool_box_toggle1);
	toggle1->SetCheck ( FALSE );
	AddChildItem (IDC_tool_box_toggle2,root_dialog);
	toggle2=(CButton *) GetDlgItem (IDC_tool_box_toggle2);
	AddChildItem (IDC_tool_box_toggle3,root_dialog);
	toggle3=(CButton *) GetDlgItem (IDC_tool_box_toggle3);
	AddChildItem (IDC_tool_box_toggle4,root_dialog);
	toggle4=(CButton *) GetDlgItem (IDC_tool_box_toggle4);
}

void tool_box_c::AddChildItem (UINT nID, CWnd *parent)
{
	if (parent->GetSafeHwnd())
	{
		CWnd *pChildItem = parent->GetDlgItem(nID);
		if (pChildItem)
			pChildItem->SetParent(this);
	}
}

tool_box_c::tool_box_c()
{
	toggle1 = (CButton *) 0;
	toggle2 = (CButton *) 0;
	toggle3 = (CButton *) 0;
	toggle4 = (CButton *) 0;
}

tool_box_c::~tool_box_c()
{
	if (toggle1)
		delete toggle1;
	if (toggle2)
		delete toggle2;
	if (toggle3)
		delete toggle3;
	if (toggle4)
		delete toggle4;
}

afx_msg void tool_box_c::OnValueChanged_toggle1()
{
	Pencil();
}

afx_msg void tool_box_c::OnValueChanged_toggle2()
{
	Line();
}

afx_msg void tool_box_c::OnValueChanged_toggle3()
{
	Rectangle();
}

afx_msg void tool_box_c::OnValueChanged_toggle4()
{
	Fill();
}

BEGIN_MESSAGE_MAP (colour_box_c, CWnd)
//{{AFX_MSG_MAP(colour_box_c)
ON_BN_CLICKED( IDC_colour_box_toggle5, OnValueChanged_toggle5 )
ON_BN_CLICKED( IDC_colour_box_toggle6, OnValueChanged_toggle6 )
ON_BN_CLICKED( IDC_colour_box_toggle7, OnValueChanged_toggle7 )
ON_BN_CLICKED( IDC_colour_box_toggle8, OnValueChanged_toggle8 )
ON_BN_CLICKED( IDC_colour_box_toggle9, OnValueChanged_toggle9 )
ON_BN_CLICKED( IDC_colour_box_toggle10, OnValueChanged_toggle10 )
ON_BN_CLICKED( IDC_colour_box_toggle11, OnValueChanged_toggle11 )
ON_BN_CLICKED( IDC_colour_box_toggle12, OnValueChanged_toggle12 )
ON_WM_ERASEBKGND()
ON_WM_CTLCOLOR()
//}}AFX_MSG_MAP
END_MESSAGE_MAP()

void colour_box_c::create ( CWnd *parent, CWnd *root_dialog )
{
	CRect rect;
	rect.SetRect ( 8, 67, 157, 168 );
	int id = IDC_shell_colour_box;
	char *widget_name = "colour_box";

colour = black;
	Create( NULL, widget_name,WS_CHILD | WS_VISIBLE | WS_TABSTOP, rect, parent, id);
	AddChildItem (IDC_colour_box_toggle5,root_dialog);
	toggle5=(CButton *) GetDlgItem (IDC_colour_box_toggle5);
	toggle5->SetCheck ( FALSE );
	AddChildItem (IDC_colour_box_toggle6,root_dialog);
	toggle6=(CButton *) GetDlgItem (IDC_colour_box_toggle6);
	AddChildItem (IDC_colour_box_toggle7,root_dialog);
	toggle7=(CButton *) GetDlgItem (IDC_colour_box_toggle7);
	AddChildItem (IDC_colour_box_toggle8,root_dialog);
	toggle8=(CButton *) GetDlgItem (IDC_colour_box_toggle8);
	AddChildItem (IDC_colour_box_toggle9,root_dialog);
	toggle9=(CButton *) GetDlgItem (IDC_colour_box_toggle9);
	AddChildItem (IDC_colour_box_toggle10,root_dialog);
	toggle10=(CButton *) GetDlgItem (IDC_colour_box_toggle10);
	AddChildItem (IDC_colour_box_toggle11,root_dialog);
	toggle11=(CButton *) GetDlgItem (IDC_colour_box_toggle11);
	AddChildItem (IDC_colour_box_toggle12,root_dialog);
	toggle12=(CButton *) GetDlgItem (IDC_colour_box_toggle12);
}

void colour_box_c::AddChildItem (UINT nID, CWnd *parent)
{
	if (parent->GetSafeHwnd())
	{
		CWnd *pChildItem = parent->GetDlgItem(nID);
		if (pChildItem)
			pChildItem->SetParent(this);
	}
}

colour_box_c::colour_box_c()
{
	toggle5 = (CButton *) 0;
	toggle6 = (CButton *) 0;
	toggle7 = (CButton *) 0;
	toggle8 = (CButton *) 0;
	toggle9 = (CButton *) 0;
	toggle10 = (CButton *) 0;
	toggle11 = (CButton *) 0;
	toggle12 = (CButton *) 0;
}

colour_box_c::~colour_box_c()
{
	if (toggle5)
		delete toggle5;
	if (toggle6)
		delete toggle6;
	if (toggle7)
		delete toggle7;
	if (toggle8)
		delete toggle8;
	if (toggle9)
		delete toggle9;
	if (toggle10)
		delete toggle10;
	if (toggle11)
		delete toggle11;
	if (toggle12)
		delete toggle12;
}

afx_msg void colour_box_c::OnValueChanged_toggle5()
{
	Black();
}

afx_msg void colour_box_c::OnValueChanged_toggle6()
{
	White();
}

afx_msg void colour_box_c::OnValueChanged_toggle7()
{
	Red();
}

afx_msg void colour_box_c::OnValueChanged_toggle8()
{
	Green();
}

afx_msg void colour_box_c::OnValueChanged_toggle9()
{
	Blue();
}

afx_msg void colour_box_c::OnValueChanged_toggle10()
{
	Yellow();
}

afx_msg void colour_box_c::OnValueChanged_toggle11()
{
	Cyan();
}

afx_msg void colour_box_c::OnValueChanged_toggle12()
{
	Magenta();
}

BOOL colour_box_c::OnEraseBkgnd ( CDC *pDC )
{
	CRect rc;
	CRgn rgn;
	GetClientRect ( &rc );
	rgn.CreateRectRgnIndirect ( rc );
	pDC->PaintRgn ( &rgn );
	return TRUE;
}

HBRUSH colour_box_c::OnCtlColor ( CDC *pDC, CWnd *pWnd, UINT nCtlColor )
{
	CDC *dc = GetDC();
	HBRUSH brush = CWnd::OnCtlColor ( pDC, pWnd, nCtlColor );
	if ( pWnd == toggle5 )
	{
		pDC->SetTextColor ( RGB ( 0, 0, 0 ) );
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.black.m_hObject;
	}
	if ( pWnd == toggle6 )
	{
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.white.m_hObject;
	}
	if ( pWnd == toggle7 )
	{
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.red.m_hObject;
	}
	if ( pWnd == toggle8 )
	{
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.green.m_hObject;
	}
	if ( pWnd == toggle9 )
	{
		pDC->SetTextColor ( RGB ( 0, 0, 0 ) );
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.blue.m_hObject;
	}
	if ( pWnd == toggle10 )
	{
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.yellow.m_hObject;
	}
	if ( pWnd == toggle11 )
	{
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.cyan.m_hObject;
	}
	if ( pWnd == toggle12 )
	{
		pDC->SetBkColor ( RGB ( 255, 255, 255 ) );
		brush = (HBRUSH)pixel_resources.magenta.m_hObject;
	}
	ReleaseDC ( dc );
	return brush;
}

BEGIN_MESSAGE_MAP (shell_c, CDialog)
//{{AFX_MSG_MAP(shell_c)
ON_COMMAND( ID_shell_button3, OnActivate_button3 )
ON_WM_SIZE()
//}}AFX_MSG_MAP
END_MESSAGE_MAP()

BOOL shell_c:: OnInitDialog()

{
	CDialog::OnInitDialog();

	initialise_objects ( );
	cascade1->CreateMenu ( );
	cascade1->AppendMenu (MF_STRING, ID_shell_button1, "&New\tCtrl + N" );
	cascade1->AppendMenu (MF_STRING, ID_shell_button2, "&Open\tCtrl + O" );
	cascade1->AppendMenu (MF_STRING, ID_shell_button3, "&Exit\tCtrl + E" );
	cascade2->CreateMenu ( );
	cascade2->AppendMenu (MF_STRING, ID_shell_button4, "&Cut\t<Keypad>Cut" );
	cascade2->AppendMenu (MF_STRING, ID_shell_button5, "Cop&y\t<Keypad>Copy" );
	cascade2->AppendMenu (MF_STRING, ID_shell_button6, "&Paste\t<Keypad>Paste" );
	menuBar1->CreateMenu ( );
	menuBar1->AppendMenu (MF_POPUP, (UINT)cascade1->m_hMenu, "&File" );
	menuBar1->AppendMenu (MF_POPUP, (UINT)cascade2->m_hMenu, "&Edit" );
	SetMenu ( menuBar1 );
	drawing->create(this, this);
	tool_box->SubclassDlgItem (IDC_shell_tool_box, this);
	tool_box->create(this, this);
	colour_box->create(this, this);

	return true;
}

shell_c::shell_c() : CDialog(shell_c::IDD)
{
	menuBar1 = new CMenu;
	cascade1 = new CMenu;
	cascade2 = new CMenu;
	drawing = new drawing_c;
	tool_box = new tool_box_c;
	colour_box = new colour_box_c;
}

shell_c::~shell_c()
{
	if (menuBar1)
	{
	menuBar1->Detach();
		delete menuBar1;
	}
	if (cascade1)
	{
	cascade1->Detach();
		delete cascade1;
	}
	if (cascade2)
	{
	cascade2->Detach();
		delete cascade2;
	}
	if (drawing)
		delete drawing;
	if (tool_box)
		delete tool_box;
	if (colour_box)
		delete colour_box;
}

afx_msg void shell_c::OnActivate_button3()
{
	DoExit();
}

void shell_c::OnSize ( UINT nType, int cx, int cy)
{
	CDialog::OnSize ( nType, cx, cy );
	if ( drawing->m_hWnd)
	{
		drawing->InvalidateRgn( NULL );
		drawing->MoveWindow ( 159, 5, cx - 164, cy - 10, TRUE );
	}
}


CXApplicationApp::CXApplicationApp ( const char *pszAppName )
	:CWinApp ( pszAppName )
{
}

BOOL CXApplicationApp::InitInstance ()
{
	BOOL base_return = CWinApp::InitInstance();
	shell = new shell_c;
	int nResponse = shell->DoModal();
	if (nResponse == IDOK)
	{
	}
	else if (nResponse == IDCANCEL)
	{
	}
	return FALSE;
}

int CXApplicationApp::ExitInstance ()
{
	return CWinApp::ExitInstance();
}

CXApplicationApp XApplication;
