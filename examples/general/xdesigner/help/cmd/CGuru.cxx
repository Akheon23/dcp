#include "CCmdHandler.h"
/*
** Generated by X-Designer
*/
/*
**LIBS: -lXm -lXt -lX11
*/

#include <stdlib.h>
#include <X11/Xatom.h>
#include <X11/Intrinsic.h>
#include <X11/Shell.h>

#include <Xm/Xm.h>
#include <X11/StringDefs.h>
#include <Xm/CascadeB.h>
#include <Xm/DialogS.h>
#include <Xm/FileSB.h>
#include <Xm/Form.h>
#include <Xm/Label.h>
#include <Xm/List.h>
#include <Xm/MessageB.h>
#include <Xm/PanedW.h>
#include <Xm/PushB.h>
#include <Xm/RowColumn.h>
#include <Xm/ScrollBar.h>
#include <Xm/SelectioB.h>
#include <Xm/Separator.h>
#include <Xm/Text.h>
#include <Xm/TextF.h>
#include <Xm/LabelG.h>
#include <Xm/PushBG.h>
#include <Xm/SeparatoG.h>
#include <Xm/ToolTip.h>


Widget xd_tooltip = (Widget) 0 ;

#include "CGuru.h"

CGuru_p helpShell = (CGuru_p) NULL;
CAboutBox_p aboutShell = (CAboutBox_p) NULL;
CPrintDialog_p printDialog = (CPrintDialog_p) NULL;
COpenFileDialog_p openFileDialog = (COpenFileDialog_p) NULL;
COpenDbErrorAlert_p cantOpenShell = (COpenDbErrorAlert_p) NULL;
CSysErrorAlert_p sysErrAlert = (CSysErrorAlert_p) NULL;
CFindAlert_p findAlert = (CFindAlert_p) NULL;
CFindDialog_p findDialog = (CFindDialog_p) NULL;
CSaveFileDialog_p saveFileDialog = (CSaveFileDialog_p) NULL;
CHistoryDialog_p historyShell = (CHistoryDialog_p) NULL;

#include "xpm.h"

static int _xd_initialised = 0 ;

typedef struct PixelResources_s { 
	Pixel buttonBackground;
} PixelResources_t, *PixelResources_p;

static PixelResources_t pixel_resources;

static XtResource pixel_resources_defn[] = {
	{
		(char*)"buttonBackground", XmCColor, XmRPixel,
		sizeof (Pixel), XtOffset(PixelResources_p, buttonBackground),
		XtRString, (XtPointer)"#dededededede"
	}, 
};

typedef struct PixmapResources_s { 
	Pixmap homeIPixmap;
	Pixmap homePixmap;
	Pixmap helpShellMask;
	Pixmap helpShellPixmap;
	Pixmap upArrowPixmap;
	Pixmap leftArrowPixmap;
	Pixmap rightArrowPixmap;
	Pixmap filePrintIPixmap;
	Pixmap filePrintPixmap;
	Pixmap fileSaveIPixmap;
	Pixmap fileSavePixmap;
	Pixmap helpHelpIPixmap;
	Pixmap helpHelpPixmap;
	Pixmap editPastePixmap;
	Pixmap fileNewPixmap;
	Pixmap editCutPixmap;
	Pixmap editCopyPixmap;
	Pixmap fileOpenPixmap;
	Pixmap fileNewIPixmap;
	Pixmap fileOpenIPixmap;
	Pixmap editCopyIPixmap;
	Pixmap editCutIPixmap;
	Pixmap editPasteIPixmap;
	Pixmap leftArrowIPixmap;
	Pixmap rightArrowIPixmap;
	Pixmap upArrowIPixmap;
	Pixmap aboutHelpPixmap;
} PixmapResources_t, *PixmapResources_p;

static PixmapResources_t pixmap_resources;

static char *homeIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGrey",
". c LightGrey",
"O s buttonBackground c #dededededede",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOO OOOOOOOOOOOO",
"OOOOOO   O . OOOOOOOOOOO",
"OOOOOO .  ... OOOOOOOOOO",
"OOOOOO . .. .. OOOOOOOOO",
"OOOOOO ... . .. OOOOOOOO",
"OOOOOO .. ... .. OOOOOOO",
"OOOOO .. ..... .. OOOOOO",
"OOOO    .......    OOOOO",
"OOOOOO ......... OOOOOOO",
"OOOOOO ...   ... OOOOOOO",
"OOOOOO ... . ... OOOOOOO",
"OOOOOO ... . ... OOOOOOO",
"OOOOOO ... . ... OOOOOOO",
"OOOOOO           OOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO"
};

static char *homePixmap_icon [] = { 
"24 24 4 1",
"  c #000000",
". c tan",
"o c #FFFFFF",
"a s buttonBackground c #dededededede",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaa aaaaaaaaaaaa",
"aaaaaa   a . aaaaaaaaaaa",
"aaaaaa .  ... aaaaaaaaaa",
"aaaaaa . .. .. aaaaaaaaa",
"aaaaaa ... . .. aaaaaaaa",
"aaaaaa .. ... .. aaaaaaa",
"aaaaa .. ..... .. aaaaaa",
"aaaa    .......    aaaaa",
"aaaaaa ......... aaaaaaa",
"aaaaaa ...   ... aaaaaaa",
"aaaaaa ... o ... aaaaaaa",
"aaaaaa ... o ... aaaaaaa",
"aaaaaa ... o ... aaaaaaa",
"aaaaaa           aaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaaaaaaaa"
};

static char *helpShellMask_icon [] = { 
"48 48 2 1",
"  c DodgerBlue",
". c #FF0000",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                      ........                  ",
"                   .............                ",
"                 ................               ",
"                ..................              ",
"                ..................              ",
"                ......      .......             ",
"               .....         ......             ",
"               .....          .....             ",
"               ....           .....             ",
"                ...           ....              ",
"                             .....              ",
"                            ......              ",
"                          .......               ",
"                        ........                ",
"                      .........                 ",
"                     .........                  ",
"                    ........                    ",
"                    .......                     ",
"                    .....                       ",
"                    ....                        ",
"                     ..                         ",
"                                                ",
"                                                ",
"                   ....                         ",
"                  ......                        ",
"                 .......                        ",
"                 .......                        ",
"                 .......                        ",
"                 ......                         ",
"                  ....                          ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                "
};

static char *helpShellPixmap_icon [] = { 
"48 48 2 1",
"  c DodgerBlue",
". c #FF0000",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                      ........                  ",
"                   .............                ",
"                 ................               ",
"                ..................              ",
"                ..................              ",
"                ......      .......             ",
"               .....         ......             ",
"               .....          .....             ",
"               ....           .....             ",
"                ...           ....              ",
"                             .....              ",
"                            ......              ",
"                          .......               ",
"                        ........                ",
"                      .........                 ",
"                     .........                  ",
"                    ........                    ",
"                    .......                     ",
"                    .....                       ",
"                    ....                        ",
"                     ..                         ",
"                                                ",
"                                                ",
"                   ....                         ",
"                  ......                        ",
"                 .......                        ",
"                 .......                        ",
"                 .......                        ",
"                 ......                         ",
"                  ....                          ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                ",
"                                                "
};

static char *upArrowPixmap_icon [] = { 
"24 24 3 1",
"  c #000000",
". c #6666cfcfffff",
"b s buttonBackground c #dededededede",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbb  bbbbbbbbbbb",
"bbbbbbbbbb .. bbbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbb ...... bbbbbbbb",
"bbbbbbb ........ bbbbbbb",
"bbbbbb .......... bbbbbb",
"bbbbb     ....     bbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb      bbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb"
};

static char *leftArrowPixmap_icon [] = { 
"24 24 3 1",
"  c #000000",
". c #6666cfcfffff",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooo ooooooooooooo",
"ooooooooo  ooooooooooooo",
"oooooooo . ooooooooooooo",
"ooooooo .. ooooooooooooo",
"oooooo ...         ooooo",
"ooooo ............ ooooo",
"oooo ............. ooooo",
"oooo ............. ooooo",
"ooooo ............ ooooo",
"oooooo ...         ooooo",
"ooooooo .. ooooooooooooo",
"oooooooo . ooooooooooooo",
"ooooooooo  ooooooooooooo",
"oooooooooo ooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *rightArrowPixmap_icon [] = { 
"24 24 3 1",
"  c #000000",
". c #6666cfcfffff",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"ooooooooooooo oooooooooo",
"ooooooooooooo  ooooooooo",
"ooooooooooooo . oooooooo",
"ooooooooooooo .. ooooooo",
"ooooo         ... oooooo",
"ooooo ............ ooooo",
"ooooo ............. oooo",
"ooooo ............. oooo",
"ooooo ............ ooooo",
"ooooo         ... oooooo",
"ooooooooooooo .. ooooooo",
"ooooooooooooo . oooooooo",
"ooooooooooooo  ooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *filePrintIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGrey",
". c LightGrey",
"c s buttonBackground c #dededededede",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccc        cccccccc",
"cccccccc ...... cccccccc",
"cccccccc .   .. cccccccc",
"cccccccc ...... cccccccc",
"cccccccc .    . cccccccc",
"cccccccc ...... cccccccc",
"ccccccc          ccccccc",
"cccccc .......... cccccc",
"ccccc              ccccc",
"ccccc ............ ccccc",
"ccccc . .......... ccccc",
"ccccc ............ ccccc",
"cccccc            cccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc"
};

static char *filePrintPixmap_icon [] = { 
"24 24 4 1",
"  c #000000",
". c white",
"O c #848284",
"c s buttonBackground c #dededededede",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccc        cccccccc",
"cccccccc ...... cccccccc",
"cccccccc .   .. cccccccc",
"cccccccc ...... cccccccc",
"cccccccc .    . cccccccc",
"cccccccc ...... cccccccc",
"ccccccc          ccccccc",
"cccccc .......... cccccc",
"ccccc  OOOOOOOOOO  ccccc",
"ccccc ............ ccccc",
"ccccc . .......... ccccc",
"ccccc ............ ccccc",
"cccccc            cccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc"
};

static char *fileSaveIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGray",
". c LightGrey",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"ooooo              ooooo",
"ooooo . ........ . ooooo",
"ooooo . ........ . ooooo",
"ooooo . ........ . ooooo",
"ooooo . ........ . ooooo",
"ooooo . ........ . ooooo",
"ooooo . ........ . ooooo",
"ooooo ..        .. ooooo",
"ooooo ............ ooooo",
"ooooo ..         . ooooo",
"ooooo ..      .. . ooooo",
"ooooo ..      .. . ooooo",
"ooooo ..      .. . ooooo",
"oooooo             ooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *fileSavePixmap_icon [] = { 
"24 24 4 1",
"  c #000000",
". c white",
"o c MistyRose",
"c s buttonBackground c #dededededede",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"ccccc              ccccc",
"ccccc o ........ o ccccc",
"ccccc o ........ o ccccc",
"ccccc o ........ o ccccc",
"ccccc o ........ o ccccc",
"ccccc o ........ o ccccc",
"ccccc o ........ o ccccc",
"ccccc oo        oo ccccc",
"ccccc oooooooooooo ccccc",
"ccccc oo         o ccccc",
"ccccc oo      .. o ccccc",
"ccccc oo      .. o ccccc",
"ccccc oo      .. o ccccc",
"cccccc             ccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc",
"cccccccccccccccccccccccc"
};

static char *helpHelpIPixmap_icon [] = { 
"24 24 2 1",
"  c SlateGrey",
". s buttonBackground c #dededededede",
"........................",
"........................",
"........................",
"........................",
"........................",
"..........    ..........",
".........      .........",
"........  ...   ........",
"........  ....  ........",
"........  ...   ........",
"............   .........",
"...........   ..........",
"...........  ...........",
"...........  ...........",
"...........  ...........",
"........................",
"...........  ...........",
"...........  ...........",
"........................",
"........................",
"........................",
"........................",
"........................",
"........................"
};

static char *helpHelpPixmap_icon [] = { 
"24 24 2 1",
"  c #000084",
". s buttonBackground c #dededededede",
"........................",
"........................",
"........................",
"........................",
"........................",
"..........    ..........",
".........      .........",
"........  ...   ........",
"........  ....  ........",
"........  ...   ........",
"............   .........",
"...........   ..........",
"...........  ...........",
"...........  ...........",
"...........  ...........",
"........................",
"...........  ...........",
"...........  ...........",
"........................",
"........................",
"........................",
"........................",
"........................",
"........................"
};

static char *editPastePixmap_icon [] = { 
"24 24 6 1",
"  c #000000",
". c DimGrey",
"o c tan",
"O c #FFFFFF",
"a c #FFFF00",
"b s buttonBackground c #dededededede",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbb    bbbbbbbbbb",
"bbbbbb     aa     bbbbbb",
"bbbbb ooo a  a ooo bbbbb",
"bbbbb oo aaaaaa oo bbbbb",
"bbbbb oo        oo bbbbb",
"bbbbb oooooooooooo bbbbb",
"bbbbb ooooo....... bbbbb",
"bbbbb ooooo.OOOOO..bbbbb",
"bbbbb ooooo.OOOOO.O.bbbb",
"bbbbb ooooo.O...O...bbbb",
"bbbbb ooooo.OOOOOOO.bbbb",
"bbbbb ooooo.O.....O.bbbb",
"bbbbbb     .OOOOOOO.bbbb",
"bbbbbbbbbbb.........bbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb"
};

static char *fileNewPixmap_icon [] = { 
"24 24 4 1",
"  s buttonBackground c #dededededede",
". c Black",
"o c White",
"O c LightGrey",
"                        ",
"                        ",
"                        ",
"                        ",
"                        ",
"      .......           ",
"      .ooooo..          ",
"      .ooooo.O.         ",
"      .ooooo.OO.        ",
"      .ooooo.OOO.       ",
"      .ooooo......      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      ............      ",
"                        ",
"                        ",
"                        ",
"                        ",
"                        "
};

static char *editCutPixmap_icon [] = { 
"24 24 2 1",
"  c Black",
". s buttonBackground c #dededededede",
"........................",
"........................",
"........................",
"........................",
"........................",
".......... ... .........",
".......... ... .........",
".......... ... .........",
"..........  .  .........",
"........... . ..........",
"...........   ..........",
"............ ...........",
"...........   ..........",
"........... .   ........",
".........   . .. .......",
"........ .. . .. .......",
"........ .. . .. .......",
"........ .. ..  ........",
".........  .............",
"........................",
"........................",
"........................",
"........................",
"........................"
};

static char *editCopyPixmap_icon [] = { 
"24 24 3 1",
"  c #000000",
". c #FFFFFF",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"ooooo      ooooooooooooo",
"ooooo ....  oooooooooooo",
"ooooo .... . ooooooooooo",
"ooooo .  .       ooooooo",
"ooooo ..... ....  oooooo",
"ooooo .     .... . ooooo",
"ooooo ..... .  .    oooo",
"ooooo .     ....... oooo",
"ooooo ..... .     . oooo",
"ooooo       ....... oooo",
"ooooooooooo .     . oooo",
"ooooooooooo ....... oooo",
"ooooooooooo         oooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *fileOpenPixmap_icon [] = { 
"24 24 4 1",
"  c #000000",
". c tan",
"o c DarkGoldenrod",
"O s buttonBackground c #dededededede",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOO   OOOOOOO",
"OOOOOOOOOOOOO OOO O OOOO",
"OOOOOOOOOOOOOOOOOO  OOOO",
"OOOOOO   OOOOOOOO   OOOO",
"OOOOO ooo       OOOOOOOO",
"OOOOO ooooooooo OOOOOOOO",
"OOOOO ooooooooo OOOOOOOO",
"OOOOO oooo          OOOO",
"OOOOO ooo ......... OOOO",
"OOOOO oo ......... OOOOO",
"OOOOO o ......... OOOOOO",
"OOOOO  ......... OOOOOOO",
"OOOOO           OOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO"
};

static char *fileNewIPixmap_icon [] = { 
"24 24 3 1",
"  s buttonBackground c #dededededede",
". c SlateGray",
"o c LightGrey",
"                        ",
"                        ",
"                        ",
"                        ",
"                        ",
"      .......           ",
"      .ooooo..          ",
"      .ooooo.o.         ",
"      .ooooo.oo.        ",
"      .ooooo.ooo.       ",
"      .ooooo......      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      .oooooooooo.      ",
"      ............      ",
"                        ",
"                        ",
"                        ",
"                        ",
"                        "
};

static char *fileOpenIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGray",
". c LightGrey",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooo   ooooooo",
"ooooooooooooo ooo o oooo",
"oooooooooooooooooo  oooo",
"oooooo   oooooooo   oooo",
"ooooo ...       oooooooo",
"ooooo ......... oooooooo",
"ooooo ......... oooooooo",
"ooooo ....          oooo",
"ooooo ... ......... oooo",
"ooooo .. ......... ooooo",
"ooooo . ......... oooooo",
"ooooo  ......... ooooooo",
"ooooo           oooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *editCopyIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGrey",
". c LightGrey",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"ooooo      ooooooooooooo",
"ooooo ....  oooooooooooo",
"ooooo .... . ooooooooooo",
"ooooo .  .       ooooooo",
"ooooo ..... ....  oooooo",
"ooooo .     .... . ooooo",
"ooooo ..... .  .    oooo",
"ooooo .     ....... oooo",
"ooooo ..... .     . oooo",
"ooooo       ....... oooo",
"ooooooooooo .     . oooo",
"ooooooooooo ....... oooo",
"ooooooooooo         oooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *editCutIPixmap_icon [] = { 
"24 24 2 1",
"  c SlateGrey",
". s buttonBackground c #dededededede",
"........................",
"........................",
"........................",
"........................",
"........................",
"........................",
".......... ... .........",
".......... ... .........",
".......... ... .........",
"..........  .  .........",
"........... . ..........",
"...........   ..........",
"............ ...........",
"...........   ..........",
"........... .   ........",
".........   . .. .......",
"........ .. . .. .......",
"........ .. . .. .......",
"........ .. ..  ........",
".........  .............",
"........................",
"........................",
"........................",
"........................"
};

static char *editPasteIPixmap_icon [] = { 
"24 24 4 1",
"  c SlateGrey",
". c SlateGrey",
"o c LightGrey",
"O s buttonBackground c #dededededede",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOO    OOOOOOOOOO",
"OOOOOO     oo     OOOOOO",
"OOOOO ooo o  o ooo OOOOO",
"OOOOO oo oooooo oo OOOOO",
"OOOOO oo        oo OOOOO",
"OOOOO oooooooooooo OOOOO",
"OOOOO ooooo....... OOOOO",
"OOOOO ooooo.ooooo..OOOOO",
"OOOOO ooooo.ooooo.o.OOOO",
"OOOOO ooooo.o...o...OOOO",
"OOOOO ooooo.ooooooo.OOOO",
"OOOOO ooooo.o.....o.OOOO",
"OOOOOO     .ooooooo.OOOO",
"OOOOOOOOOOO.........OOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO",
"OOOOOOOOOOOOOOOOOOOOOOOO"
};

static char *leftArrowIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGrey",
". c LightGrey",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooo ooooooooooooo",
"ooooooooo  ooooooooooooo",
"oooooooo . ooooooooooooo",
"ooooooo .. ooooooooooooo",
"oooooo ...         ooooo",
"ooooo ............ ooooo",
"oooo ............. ooooo",
"oooo ............. ooooo",
"ooooo ............ ooooo",
"oooooo ...         ooooo",
"ooooooo .. ooooooooooooo",
"oooooooo . ooooooooooooo",
"ooooooooo  ooooooooooooo",
"oooooooooo ooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *rightArrowIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGrey",
". c LightGrey",
"o s buttonBackground c #dededededede",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"ooooooooooooo oooooooooo",
"ooooooooooooo  ooooooooo",
"ooooooooooooo . oooooooo",
"ooooooooooooo .. ooooooo",
"ooooo         ... oooooo",
"ooooo ............ ooooo",
"ooooo ............. oooo",
"ooooo ............. oooo",
"ooooo ............ ooooo",
"ooooo         ... oooooo",
"ooooooooooooo .. ooooooo",
"ooooooooooooo . oooooooo",
"ooooooooooooo  ooooooooo",
"ooooooooooooo oooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo",
"oooooooooooooooooooooooo"
};

static char *upArrowIPixmap_icon [] = { 
"24 24 3 1",
"  c SlateGrey",
". c LightGrey",
"b s buttonBackground c #dededededede",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbb  bbbbbbbbbbb",
"bbbbbbbbbb .. bbbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbb ...... bbbbbbbb",
"bbbbbbb ........ bbbbbbb",
"bbbbbb .......... bbbbbb",
"bbbbb     ....     bbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb .... bbbbbbbbb",
"bbbbbbbbb      bbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb",
"bbbbbbbbbbbbbbbbbbbbbbbb"
};

static char *aboutHelpPixmap_icon [] = { 
"100 100 3 1",
"  c #000084",
". s buttonBackground c #dededededede",
"o c #9ca69ca8ffff",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"..............................................oooooooooo............................................",
".........................................ooooo           ...........................................",
"........................................oo                 .........................................",
"......................................ooo                   ........................................",
".....................................oo                       ......................................",
"....................................oo                         .....................................",
"...................................oo                           ....................................",
"...................................o                             ...................................",
"...................................o                             ...................................",
"..................................o             ......            ..................................",
".................................oo          ...........           .................................",
".................................o          .............          .................................",
".................................o         ...............          ................................",
".................................o         ...............o         ................................",
".................................o        ................o         ................................",
".................................o        ................o         ................................",
".................................o        ................o         ................................",
".................................o        ................o         ................................",
".................................o        ...............oo         ................................",
".................................o        ..............oo         .................................",
".................................o        .............oo          .................................",
"..................................        ............oo          ..................................",
"...................................      ............oo           ..................................",
"...................................................ooo           ...................................",
"..................................................oo            ....................................",
".................................................oo            .....................................",
"................................................oo            ......................................",
"...............................................oo            .......................................",
"..............................................oo            ........................................",
"..............................................o            .........................................",
".............................................oo          ...........................................",
".............................................o          ............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
".............................................o         .............................................",
"..............................................         .............................................",
"...............................................       ..............................................",
"....................................................................................................",
"................................................ooo.................................................",
"..............................................ooo   ................................................",
"..............................................o       ..............................................",
".............................................oo       ..............................................",
".............................................o         .............................................",
".............................................o         .............................................",
"..............................................         .............................................",
"...............................................       ..............................................",
"...............................................       ..............................................",
".................................................   ................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"....................................................................................................",
"...................................................................................................."
};


static void initialise_objects(Widget parent)
{
	XpmAttributes xpm_attributes;

	/*
	** Some code to ensure that the pixmaps look OK
	** even if the color map is full or nearly so: 
	*/
	xpm_attributes.valuemask = XpmCloseness;
	xpm_attributes.closeness = 40000;
	xpm_attributes.colormap  = (Colormap) 0;
	xpm_attributes.depth     = 0;
	xpm_attributes.visual    = (Visual *) 0;

	if (_xd_initialised) {
		return ;
	}

	_xd_initialised = 1;

	while (XtParent(parent)) {
		parent = XtParent(parent);
	}

	XtVaGetValues(parent,
	              XmNcolormap, &xpm_attributes.colormap,
	              XmNdepth,    &xpm_attributes.depth,
	              XmNvisual,   &xpm_attributes.visual,
	              NULL);

	if (xpm_attributes.colormap != (Colormap) 0) {
		xpm_attributes.valuemask |= XpmColormap ;
	}

	if (xpm_attributes.depth > 0) {
		xpm_attributes.valuemask |= XpmDepth ;
	}

	if (xpm_attributes.visual != (Visual *) 0) {
		xpm_attributes.valuemask |= XpmVisual ;
	}

	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(XtDisplay(parent))) != 1) {
	XtGetApplicationResources(parent, &pixel_resources, pixel_resources_defn, XtNumber(pixel_resources_defn), (ArgList)0, 0);
	}
	xpm_attributes.valuemask   |= XpmColorSymbols;
	xpm_attributes.colorsymbols = (XpmColorSymbol *) XtMalloc(sizeof(XpmColorSymbol) * 1);
	xpm_attributes.numsymbols   = 1;
	xpm_attributes.colorsymbols[0].name  = "buttonBackground";
	xpm_attributes.colorsymbols[0].value = (char *) 0;
	xpm_attributes.colorsymbols[0].pixel = pixel_resources.buttonBackground;
	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            homeIPixmap_icon,
	                           &pixmap_resources.homeIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.homeIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            homePixmap_icon,
	                           &pixmap_resources.homePixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.homePixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            helpShellMask_icon,
	                           &pixmap_resources.helpShellMask,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.helpShellMask = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            helpShellPixmap_icon,
	                           &pixmap_resources.helpShellPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.helpShellPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            upArrowPixmap_icon,
	                           &pixmap_resources.upArrowPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.upArrowPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            leftArrowPixmap_icon,
	                           &pixmap_resources.leftArrowPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.leftArrowPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            rightArrowPixmap_icon,
	                           &pixmap_resources.rightArrowPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.rightArrowPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            filePrintIPixmap_icon,
	                           &pixmap_resources.filePrintIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.filePrintIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            filePrintPixmap_icon,
	                           &pixmap_resources.filePrintPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.filePrintPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            fileSaveIPixmap_icon,
	                           &pixmap_resources.fileSaveIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.fileSaveIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            fileSavePixmap_icon,
	                           &pixmap_resources.fileSavePixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.fileSavePixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            helpHelpIPixmap_icon,
	                           &pixmap_resources.helpHelpIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.helpHelpIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            helpHelpPixmap_icon,
	                           &pixmap_resources.helpHelpPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.helpHelpPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            editPastePixmap_icon,
	                           &pixmap_resources.editPastePixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.editPastePixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            fileNewPixmap_icon,
	                           &pixmap_resources.fileNewPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.fileNewPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            editCutPixmap_icon,
	                           &pixmap_resources.editCutPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.editCutPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            editCopyPixmap_icon,
	                           &pixmap_resources.editCopyPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.editCopyPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            fileOpenPixmap_icon,
	                           &pixmap_resources.fileOpenPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.fileOpenPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            fileNewIPixmap_icon,
	                           &pixmap_resources.fileNewIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.fileNewIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            fileOpenIPixmap_icon,
	                           &pixmap_resources.fileOpenIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.fileOpenIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            editCopyIPixmap_icon,
	                           &pixmap_resources.editCopyIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.editCopyIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            editCutIPixmap_icon,
	                           &pixmap_resources.editCutIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.editCutIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            editPasteIPixmap_icon,
	                           &pixmap_resources.editPasteIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.editPasteIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            leftArrowIPixmap_icon,
	                           &pixmap_resources.leftArrowIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.leftArrowIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            rightArrowIPixmap_icon,
	                           &pixmap_resources.rightArrowIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.rightArrowIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            upArrowIPixmap_icon,
	                           &pixmap_resources.upArrowIPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.upArrowIPixmap = XmUNSPECIFIED_PIXMAP;
	}

	if (XpmCreatePixmapFromData(XtDisplay(parent),
	                            RootWindowOfScreen(XtScreen(parent)),
	                            aboutHelpPixmap_icon,
	                           &pixmap_resources.aboutHelpPixmap,
	                            NULL, 
	                           &xpm_attributes) != 0) {
		pixmap_resources.aboutHelpPixmap = XmUNSPECIFIED_PIXMAP;
	}

	XtFree((char *) xpm_attributes.colorsymbols);
}

/*
** The ToolTips Widget
*/

extern Widget xd_tooltip ;

void CStatusBar::create (Widget parent, char *widget_name)
{
	Widget children[1];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */

	if ( !widget_name )
		widget_name = (char *) "statusBar";

	statusBar = XmCreateForm ( parent, widget_name, al, ac );
	_xd_rootwidget = statusBar;
	XtSetArg(al[ac], XmNtraversalOn, FALSE); ac++;
	statusLabel = XmCreateLabel ( statusBar, (char *) "statusLabel", al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( statusLabel, al, ac );
	ac = 0;
	if ((children[ac] = statusLabel) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
}

void CGuru::create (Display *display, char *app_name, int app_argc, char **app_argv, char *app_class_name)
{
	Widget children[14];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XrmValue from_value, to_value; /* For resource conversion */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget separator7 = (Widget)NULL;
	Widget separator8 = (Widget)NULL;
	Widget separator9 = (Widget)NULL;
	Widget separator10 = (Widget)NULL;
	Widget separator11 = (Widget)NULL;
	Widget separator12 = (Widget)NULL;
	Widget separator13 = (Widget)NULL;
	Widget separator14 = (Widget)NULL;
	Widget separator15 = (Widget)NULL;
	Widget separator16 = (Widget)NULL;
	Widget form5 = (Widget)NULL;
	Widget scrolledText1 = (Widget)NULL;
	Widget scrollbar6 = (Widget)NULL;
	Widget scrollbar7 = (Widget)NULL;
	Widget form7 = (Widget)NULL;
	Widget scrolledList3 = (Widget)NULL;
	Widget scrollbar8 = (Widget)NULL;
	Widget scrollbar9 = (Widget)NULL;
	helpDir = 0 ;

	if ( !app_class_name )
		app_class_name = (char *) "xdhelp";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	XtSetArg(al[ac], XmNargc, app_argc); ac++;
	XtSetArg(al[ac], XmNargv, app_argv); ac++;
	helpShell = XtAppCreateShell(app_name, app_class_name, applicationShellWidgetClass, display, al, ac);

	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(helpShell, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = helpShell;
	initialise_objects ( helpShell );
	XtSetArg(al[ac], XmNiconMask, pixmap_resources.helpShellMask); ac++;
	XtSetArg(al[ac], XmNiconPixmap, pixmap_resources.helpShellPixmap); ac++;
	if (helpShell)
		XtSetValues ( helpShell, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNresizePolicy, XmRESIZE_NONE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	mainForm = XmCreateForm ( helpShell, (char *) "mainForm", al, ac );
	ac = 0;
	menuBar = XmCreateMenuBar ( mainForm, (char *) "menuBar", al, ac );
	fileCB = XmCreateCascadeButton ( menuBar, (char *) "fileCB", al, ac );
	fileMenu = XmCreatePulldownMenu ( menuBar, (char *) "fileMenu", al, ac );
	XtSetArg(al[ac], XmNsensitive, FALSE); ac++;
	fileNewItem = XmCreatePushButton ( fileMenu, (char *) "fileNewItem", al, ac );
	ac = 0;
	fileOpenItem = XmCreatePushButton ( fileMenu, (char *) "fileOpenItem", al, ac );
	fileCloseItem = XmCreatePushButton ( fileMenu, (char *) "fileCloseItem", al, ac );
	separator7 = XmCreateSeparator ( fileMenu, (char *) "separator7", al, ac );
	fileSaveItem = XmCreatePushButton ( fileMenu, (char *) "fileSaveItem", al, ac );
	fileSaveAsItem = XmCreatePushButton ( fileMenu, (char *) "fileSaveAsItem", al, ac );
	fileRevertItem = XmCreatePushButton ( fileMenu, (char *) "fileRevertItem", al, ac );
	separator8 = XmCreateSeparator ( fileMenu, (char *) "separator8", al, ac );
	filePrintItem = XmCreatePushButton ( fileMenu, (char *) "filePrintItem", al, ac );
	separator9 = XmCreateSeparator ( fileMenu, (char *) "separator9", al, ac );
	fileQuitItem = XmCreatePushButton ( fileMenu, (char *) "fileQuitItem", al, ac );
	editCB = XmCreateCascadeButton ( menuBar, (char *) "editCB", al, ac );
	editMenu = XmCreatePulldownMenu ( menuBar, (char *) "editMenu", al, ac );
	editUndoItem = XmCreatePushButton ( editMenu, (char *) "editUndoItem", al, ac );
	separator10 = XmCreateSeparator ( editMenu, (char *) "separator10", al, ac );
	editCutItem = XmCreatePushButton ( editMenu, (char *) "editCutItem", al, ac );
	editCopyItem = XmCreatePushButton ( editMenu, (char *) "editCopyItem", al, ac );
	editPasteItem = XmCreatePushButton ( editMenu, (char *) "editPasteItem", al, ac );
	separator11 = XmCreateSeparator ( editMenu, (char *) "separator11", al, ac );
	editClearItem = XmCreatePushButton ( editMenu, (char *) "editClearItem", al, ac );
	navCB = XmCreateCascadeButton ( menuBar, (char *) "navCB", al, ac );
	navMenu = XmCreatePulldownMenu ( menuBar, (char *) "navMenu", al, ac );
	navBackItem = XmCreatePushButton ( navMenu, (char *) "navBackItem", al, ac );
	navForwardItem = XmCreatePushButton ( navMenu, (char *) "navForwardItem", al, ac );
	navIndexItem = XmCreatePushButton ( navMenu, (char *) "navIndexItem", al, ac );
	separator12 = XmCreateSeparator ( navMenu, (char *) "separator12", al, ac );
	navHistoryItem = XmCreatePushButton ( navMenu, (char *) "navHistoryItem", al, ac );
	separator13 = XmCreateSeparator ( navMenu, (char *) "separator13", al, ac );
	navFindItem = XmCreatePushButton ( navMenu, (char *) "navFindItem", al, ac );
	helpCB = XmCreateCascadeButton ( menuBar, (char *) "helpCB", al, ac );
	helpMenu = XmCreatePulldownMenu ( menuBar, (char *) "helpMenu", al, ac );
	helpOnVersionItem = XmCreatePushButton ( helpMenu, (char *) "helpOnVersionItem", al, ac );
	helpIndexItem = XmCreatePushButton ( helpMenu, (char *) "helpIndexItem", al, ac );
	XtSetArg(al[ac], XmNmenuHelpWidget, helpCB); ac++;
	if (menuBar)
		XtSetValues ( menuBar, al, ac );
	ac = 0;
	statusBar->create ( mainForm, (char *) "statusBar" );
	XtSetArg(al[ac], XmNspacing, 0); ac++;
	XtSetArg(al[ac], XmNorientation, XmHORIZONTAL); ac++;
	XtSetArg(al[ac], XmNpacking, XmPACK_TIGHT); ac++;
	toolBar = XmCreateRowColumn ( mainForm, (char *) "toolBar", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNsensitive, FALSE); ac++;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	newButton = XmCreatePushButton ( toolBar, (char *) "newButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.fileNewPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.fileNewIPixmap); ac++;
	if (newButton)
		XtSetValues ( newButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	openButton = XmCreatePushButton ( toolBar, (char *) "openButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.fileOpenPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.fileOpenIPixmap); ac++;
	if (openButton)
		XtSetValues ( openButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	saveButton = XmCreatePushButton ( toolBar, (char *) "saveButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.fileSavePixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.fileSaveIPixmap); ac++;
	if (saveButton)
		XtSetValues ( saveButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	printButton = XmCreatePushButton ( toolBar, (char *) "printButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.filePrintPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.filePrintIPixmap); ac++;
	if (printButton)
		XtSetValues ( printButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNwidth, 4); ac++;
	XtSetArg(al[ac], XmNseparatorType, XmNO_LINE); ac++;
	XtSetArg(al[ac], XmNorientation, XmVERTICAL); ac++;
	XtSetArg(al[ac], XmNmargin, 0); ac++;
	separator14 = XmCreateSeparatorGadget ( toolBar, (char *) "separator14", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	cutButton = XmCreatePushButton ( toolBar, (char *) "cutButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.editCutPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.editCutIPixmap); ac++;
	if (cutButton)
		XtSetValues ( cutButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	copyButton = XmCreatePushButton ( toolBar, (char *) "copyButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.editCopyPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.editCopyIPixmap); ac++;
	if (copyButton)
		XtSetValues ( copyButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	pasteButton = XmCreatePushButton ( toolBar, (char *) "pasteButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.editPastePixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.editPasteIPixmap); ac++;
	if (pasteButton)
		XtSetValues ( pasteButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNwidth, 4); ac++;
	XtSetArg(al[ac], XmNseparatorType, XmNO_LINE); ac++;
	XtSetArg(al[ac], XmNorientation, XmVERTICAL); ac++;
	XtSetArg(al[ac], XmNmargin, 0); ac++;
	separator15 = XmCreateSeparatorGadget ( toolBar, (char *) "separator15", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	backButton = XmCreatePushButton ( toolBar, (char *) "backButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.leftArrowPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.leftArrowIPixmap); ac++;
	if (backButton)
		XtSetValues ( backButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	forwardButton = XmCreatePushButton ( toolBar, (char *) "forwardButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.rightArrowPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.rightArrowIPixmap); ac++;
	if (forwardButton)
		XtSetValues ( forwardButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	firstButton = XmCreatePushButton ( toolBar, (char *) "firstButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.homePixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.homeIPixmap); ac++;
	if (firstButton)
		XtSetValues ( firstButton, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNwidth, 4); ac++;
	XtSetArg(al[ac], XmNseparatorType, XmNO_LINE); ac++;
	XtSetArg(al[ac], XmNorientation, XmVERTICAL); ac++;
	XtSetArg(al[ac], XmNmargin, 0); ac++;
	separator16 = XmCreateSeparatorGadget ( toolBar, (char *) "separator16", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNbackground, pixel_resources.buttonBackground); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	tb_helpButton = XmCreatePushButton ( toolBar, (char *) "helpButton", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.helpHelpPixmap); ac++;
	XtSetArg(al[ac], XmNlabelInsensitivePixmap, pixmap_resources.helpHelpIPixmap); ac++;
	if (tb_helpButton)
		XtSetValues ( tb_helpButton, al, ac );
	ac = 0;
	panedWindow = XmCreatePanedWindow ( mainForm, (char *) "panedWindow", al, ac );
	XtSetArg(al[ac], XmNpaneMinimum, 64); ac++;
	XtSetArg(al[ac], XmNwidth, 350); ac++;
	XtSetArg(al[ac], XmNheight, 300); ac++;
	form5 = XmCreateForm ( panedWindow, (char *) "form5", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNcolumns, 44); ac++;
	XtSetArg(al[ac], XmNeditable, FALSE); ac++;
	XtSetArg(al[ac], XmNresizeHeight, TRUE); ac++;
	XtSetArg(al[ac], XmNresizeWidth, TRUE); ac++;
	XtSetArg(al[ac], XmNeditMode, XmMULTI_LINE_EDIT); ac++;
	XtSetArg(al[ac], XmNwordWrap, TRUE); ac++;
	XtSetArg(al[ac], XmNscrollHorizontal, FALSE); ac++;
	helpText = XmCreateScrolledText ( form5, (char *) "helpText", al, ac );
	ac = 0;
	scrolledText1 = XtParent ( helpText );

	XtSetArg(al[ac], XmNhorizontalScrollBar, &scrollbar6); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &scrollbar7); ac++;
	XtGetValues(scrolledText1, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNcolumns, 30); ac++;
	XtSetArg(al[ac], XmNeditable, FALSE); ac++;
	titleText = XmCreateTextField ( form5, (char *) "titleText", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNpaneMinimum, 125); ac++;
	form7 = XmCreateForm ( panedWindow, (char *) "form7", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNselectionPolicy, XmBROWSE_SELECT); ac++;
	XtSetArg(al[ac], XmNlistSizePolicy, XmRESIZE_IF_POSSIBLE); ac++;
	linksList = XmCreateScrolledList ( form7, (char *) "linksList", al, ac );
	ac = 0;
	scrolledList3 = XtParent ( linksList );

	XtSetArg(al[ac], XmNhorizontalScrollBar, &scrollbar8); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &scrollbar9); ac++;
	XtGetValues(scrolledList3, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNtraversalOn, FALSE); ac++;
	linksLabel = XmCreateLabel ( form7, (char *) "linksLabel", al, ac );
	ac = 0;


	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, 0); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 0); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightOffset, 0); ac++;
	XtSetValues ( menuBar, al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( statusBar->xd_rootwidget(), al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopOffset, 0); ac++;
	XtSetArg(al[ac], XmNtopWidget, menuBar); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 0); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightOffset, 0); ac++;
	XtSetValues ( toolBar, al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopOffset, 0); ac++;
	XtSetArg(al[ac], XmNtopWidget, toolBar); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNbottomWidget, statusBar->xd_rootwidget()); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightOffset, 0); ac++;
	XtSetValues ( panedWindow, al, ac );
	ac = 0;
	UpdateUI();
	XtAddCallback (fileNewItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (fileNewItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (fileNewItem, XmNactivateCallback, &CGuru::OnFileNew, (XtPointer) this);
	XtAddCallback (fileOpenItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (fileOpenItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (fileOpenItem, XmNactivateCallback, &CGuru::OnFileOpen, (XtPointer) this);
	XtAddCallback (fileCloseItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (fileCloseItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (fileCloseItem, XmNactivateCallback, &CGuru::OnFileClose, (XtPointer) this);
	XtAddCallback (fileSaveItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (fileSaveItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (fileSaveItem, XmNactivateCallback, &CGuru::OnFileSave, (XtPointer) this);
	XtAddCallback (fileSaveAsItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (fileSaveAsItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (fileSaveAsItem, XmNactivateCallback, &CGuru::OnFileSaveAs, (XtPointer) this);
	XtAddCallback (fileRevertItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (fileRevertItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (fileRevertItem, XmNactivateCallback, &CGuru::OnFileRevert, (XtPointer) this);
	XtAddCallback (filePrintItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (filePrintItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (filePrintItem, XmNactivateCallback, &CGuru::OnFilePrint, (XtPointer) this);
	XtAddCallback (fileQuitItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (fileQuitItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (fileQuitItem, XmNactivateCallback, &CGuru::OnFileQuit, (XtPointer) this);
	if ((children[ac] = fileOpenItem) != (Widget) 0) { ac++; }
	if ((children[ac] = filePrintItem) != (Widget) 0) { ac++; }
	if ((children[ac] = separator9) != (Widget) 0) { ac++; }
	if ((children[ac] = fileQuitItem) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, fileMenu); ac++;
	XtSetValues(fileCB, al, ac );
	ac = 0;
	XtAddCallback (editUndoItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (editUndoItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (editUndoItem, XmNactivateCallback, &CGuru::OnEditUndo, (XtPointer) this);
	XtAddCallback (editCutItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (editCutItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (editCutItem, XmNactivateCallback, &CGuru::OnEditCut, (XtPointer) this);
	XtAddCallback (editCopyItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (editCopyItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (editCopyItem, XmNactivateCallback, &CGuru::OnEditCopy, (XtPointer) this);
	XtAddCallback (editPasteItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (editPasteItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (editPasteItem, XmNactivateCallback, &CGuru::OnEditPaste, (XtPointer) this);
	XtAddCallback (editClearItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (editClearItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (editClearItem, XmNactivateCallback, &CGuru::OnEditClear, (XtPointer) this);
	if ((children[ac] = editCopyItem) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, editMenu); ac++;
	XtSetValues(editCB, al, ac );
	ac = 0;
	XtAddCallback (navBackItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (navBackItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (navBackItem, XmNactivateCallback, &CGuru::OnNavBack, (XtPointer) this);
	XtAddCallback (navForwardItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (navForwardItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (navForwardItem, XmNactivateCallback, &CGuru::OnNavForward, (XtPointer) this);
	XtAddCallback (navIndexItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (navIndexItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (navIndexItem, XmNactivateCallback, &CGuru::OnNavIndex, (XtPointer) this);
	XtAddCallback (navHistoryItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (navHistoryItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (navHistoryItem, XmNactivateCallback, &CGuru::OnNavHistory, (XtPointer) this);
	XtAddCallback (navFindItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (navFindItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (navFindItem, XmNactivateCallback, &CGuru::OnFind, (XtPointer) this);
	if ((children[ac] = navBackItem) != (Widget) 0) { ac++; }
	if ((children[ac] = navForwardItem) != (Widget) 0) { ac++; }
	if ((children[ac] = navIndexItem) != (Widget) 0) { ac++; }
	if ((children[ac] = separator12) != (Widget) 0) { ac++; }
	if ((children[ac] = navHistoryItem) != (Widget) 0) { ac++; }
	if ((children[ac] = separator13) != (Widget) 0) { ac++; }
	if ((children[ac] = navFindItem) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, navMenu); ac++;
	XtSetValues(navCB, al, ac );
	ac = 0;
	XtAddCallback (helpOnVersionItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (helpOnVersionItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (helpOnVersionItem, XmNactivateCallback, &CGuru::OnHelpVersion, (XtPointer) this);
	XtAddCallback (helpIndexItem, XmNactivateCallback, &CGuru::OnHelpIndex, (XtPointer) this);
	XtAddCallback (helpIndexItem, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (helpIndexItem, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	if ((children[ac] = helpOnVersionItem) != (Widget) 0) { ac++; }
	if ((children[ac] = helpIndexItem) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, helpMenu); ac++;
	XtSetValues(helpCB, al, ac );
	ac = 0;
	if ((children[ac] = fileCB) != (Widget) 0) { ac++; }
	if ((children[ac] = editCB) != (Widget) 0) { ac++; }
	if ((children[ac] = navCB) != (Widget) 0) { ac++; }
	if ((children[ac] = helpCB) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	XtAddCallback (newButton, XmNactivateCallback, &CGuru::OnFileNew, (XtPointer) this);
	XtAddCallback (newButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (newButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, newButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (openButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (openButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (openButton, XmNactivateCallback, &CGuru::OnFileOpen, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, openButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (saveButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (saveButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (saveButton, XmNactivateCallback, &CGuru::OnFileSave, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, saveButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (printButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (printButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (printButton, XmNactivateCallback, &CGuru::OnFilePrint, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, printButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (cutButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (cutButton, XmNhelpCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (cutButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (cutButton, XmNactivateCallback, &CGuru::OnEditCut, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, cutButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (copyButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (copyButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (copyButton, XmNactivateCallback, &CGuru::OnEditCopy, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, copyButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (pasteButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (pasteButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (pasteButton, XmNactivateCallback, &CGuru::OnEditPaste, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, pasteButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (backButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (backButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (backButton, XmNactivateCallback, &CGuru::OnNavBack, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, backButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (forwardButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (forwardButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (forwardButton, XmNactivateCallback, &CGuru::OnNavForward, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, forwardButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (firstButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (firstButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XtAddCallback (firstButton, XmNactivateCallback, &CGuru::OnNavIndex, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, firstButton, (XmString) 0, (XmFontList) 0) ;
	XtAddCallback (tb_helpButton, XmNactivateCallback, &CGuru::OnHelpIndex, (XtPointer) this);
	XtAddCallback (tb_helpButton, XmNarmCallback, &CGuru::OnSetStatus, (XtPointer) this);
	XtAddCallback (tb_helpButton, XmNdisarmCallback, &CGuru::OnUnsetStatus, (XtPointer) this);
	XmToolTipRegister(xd_tooltip, tb_helpButton, (XmString) 0, (XmFontList) 0) ;
	if ((children[ac] = openButton) != (Widget) 0) { ac++; }
	if ((children[ac] = printButton) != (Widget) 0) { ac++; }
	if ((children[ac] = separator14) != (Widget) 0) { ac++; }
	if ((children[ac] = copyButton) != (Widget) 0) { ac++; }
	if ((children[ac] = separator15) != (Widget) 0) { ac++; }
	if ((children[ac] = backButton) != (Widget) 0) { ac++; }
	if ((children[ac] = forwardButton) != (Widget) 0) { ac++; }
	if ((children[ac] = firstButton) != (Widget) 0) { ac++; }
	if ((children[ac] = separator16) != (Widget) 0) { ac++; }
	if ((children[ac] = tb_helpButton) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopOffset, 8); ac++;
	XtSetArg(al[ac], XmNtopWidget, titleText); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNbottomOffset, 10); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( scrolledText1, al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( titleText, al, ac );
	ac = 0;
	XtAddCallback (helpText, XmNvalueChangedCallback, &CGuru::OnTextSelectionChanged, (XtPointer) this);
	XtAddCallback (helpText, XmNgainPrimaryCallback, &CGuru::OnTextSelectionChanged, (XtPointer) this);
	XtAddCallback (helpText, XmNmotionVerifyCallback, &CGuru::OnTextSelectionChanged, (XtPointer) this);
	XtAddCallback (helpText, XmNlosePrimaryCallback, &CGuru::OnTextSelectionChanged, (XtPointer) this);
	XtAddCallback (helpText, XmNlosingFocusCallback, &CGuru::OnTextSelectionChanged, (XtPointer) this);
	if (helpText != (Widget) 0) { XtManageChild(helpText); }
	if ((children[ac] = titleText) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, linksLabel); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( scrolledList3, al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
	XtSetValues ( linksLabel, al, ac );
	ac = 0;
	XtAddCallback (linksList, XmNbrowseSelectionCallback, &CGuru::OnLinkSelection, (XtPointer) this);
	XtAddCallback (linksList, XmNdefaultActionCallback, &CGuru::OnSelectLink, (XtPointer) this);
	if (linksList != (Widget) 0) { XtManageChild(linksList); }
	if ((children[ac] = linksLabel) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if ((children[ac] = form5) != (Widget) 0) { ac++; }
	if ((children[ac] = form7) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if ((children[ac] = menuBar) != (Widget) 0) { ac++; }
	if ((children[ac] = statusBar->xd_rootwidget()) != (Widget) 0) { ac++; }
	if ((children[ac] = toolBar) != (Widget) 0) { ac++; }
	if ((children[ac] = panedWindow) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if (mainForm != (Widget) 0) { XtManageChild ( mainForm); }
}

CGuru::CGuru()
{
	statusBar = new CStatusBar;
}

CGuru::~CGuru()
{
	delete statusBar;
}

void CGuru::OnHelpIndex( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnHelpIndex ( widget, call_data );
}

void CGuru::OnUnsetStatus( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnUnsetStatus ( widget, call_data );
}

void CGuru::OnSetStatus( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnSetStatus ( widget, call_data );
}

void CGuru::OnFind( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFind ( widget, call_data );
}

void CGuru::OnHelpVersion( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnHelpVersion ( widget, call_data );
}

void CGuru::OnNavHistory( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnNavHistory ( widget, call_data );
}

void CGuru::OnTextSelectionChanged( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnTextSelectionChanged ( widget, call_data );
}

void CGuru::OnLinkSelection( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnLinkSelection ( widget, call_data );
}

void CGuru::OnNavIndex( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnNavIndex ( widget, call_data );
}

void CGuru::OnNavForward( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnNavForward ( widget, call_data );
}

void CGuru::OnNavBack( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnNavBack ( widget, call_data );
}

void CGuru::OnEditClear( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnEditClear ( widget, call_data );
}

void CGuru::OnEditPaste( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnEditPaste ( widget, call_data );
}

void CGuru::OnEditCopy( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnEditCopy ( widget, call_data );
}

void CGuru::OnEditCut( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnEditCut ( widget, call_data );
}

void CGuru::OnEditUndo( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnEditUndo ( widget, call_data );
}

void CGuru::OnFilePrint( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFilePrint ( widget, call_data );
}

void CGuru::OnFileRevert( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFileRevert ( widget, call_data );
}

void CGuru::OnFileSaveAs( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFileSaveAs ( widget, call_data );
}

void CGuru::OnFileSave( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFileSave ( widget, call_data );
}

void CGuru::OnFileClose( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFileClose ( widget, call_data );
}

void CGuru::OnFileNew( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFileNew ( widget, call_data );
}

void CGuru::OnFileQuit( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFileQuit ( widget, call_data );
}

void CGuru::OnFileOpen( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnFileOpen ( widget, call_data );
}

void CGuru::OnSelectLink( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CGuru_p instance = (CGuru_p) client_data;
	instance->OnSelectLink ( widget, call_data );
}


void CAboutBox::create (Widget parent, char *widget_name)
{
	Widget children[3];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget rowcol2 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "aboutShell";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	aboutShell = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(aboutShell, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = aboutShell;
	initialise_objects ( aboutShell );
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	XtSetArg(al[ac], XmNdialogType, XmDIALOG_TEMPLATE); ac++;
	aboutDT = XmCreateMessageBox ( aboutShell, (char *) "aboutDT", al, ac );
	ac = 0;
	aboutOKButton = XmCreatePushButton ( aboutDT, (char *) "aboutOKButton", al, ac );
	XtSetArg(al[ac], XmNentryAlignment, XmALIGNMENT_CENTER); ac++;
	rowcol2 = XmCreateRowColumn ( aboutDT, (char *) "rowcol2", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNtraversalOn, FALSE); ac++;
	prognameText = XmCreateLabel ( rowcol2, (char *) "prognameText", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNtraversalOn, FALSE); ac++;
	XtSetArg(al[ac], XmNlabelType, XmPIXMAP); ac++;
	xhd_picture = XmCreateLabel ( rowcol2, (char *) "xhd_picture", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlabelPixmap, pixmap_resources.aboutHelpPixmap); ac++;
	if (xhd_picture)
		XtSetValues ( xhd_picture, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNtraversalOn, FALSE); ac++;
	aboutText = XmCreateLabel ( rowcol2, (char *) "aboutText", al, ac );
	ac = 0;

	XtAddCallback (aboutOKButton, XmNactivateCallback, &CAboutBox::OnOK, (XtPointer) this);
	if ((children[ac] = prognameText) != (Widget) 0) { ac++; }
	if ((children[ac] = xhd_picture) != (Widget) 0) { ac++; }
	if ((children[ac] = aboutText) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if ((children[ac] = aboutOKButton) != (Widget) 0) { ac++; }
	if ((children[ac] = rowcol2) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
}

void CAboutBox::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CAboutBox_p instance = (CAboutBox_p) client_data;
	instance->OnOK ( widget, call_data );
}


void CPrintDialog::create (Widget parent, char *widget_name)
{
	Widget children[5];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget button34 = (Widget)NULL;
	Widget button36 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "printDialog";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	printDialog = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(printDialog, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = printDialog;
	initialise_objects ( printDialog );
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	XtSetArg(al[ac], XmNdialogType, XmDIALOG_TEMPLATE); ac++;
	printDT = XmCreateMessageBox ( printDialog, (char *) "printDT", al, ac );
	ac = 0;
	printOKbutton = XmCreatePushButton ( printDT, (char *) "okButton", al, ac );
	button34 = XmCreatePushButton ( printDT, (char *) "cancelButton", al, ac );
	button36 = XmCreatePushButton ( printDT, (char *) "helpButton", al, ac );
	printForm = XmCreateForm ( printDT, (char *) "printForm", al, ac );
	XtSetArg(al[ac], XmNtraversalOn, FALSE); ac++;
	printLabel = XmCreateLabel ( printForm, (char *) "printLabel", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNcolumns, 40); ac++;
	printCommand = XmCreateText ( printForm, (char *) "printCommand", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNdefaultButton, printOKbutton); ac++;
	if (printDT)
		XtSetValues ( printDT, al, ac );
	ac = 0;

	XtAddCallback (printOKbutton, XmNactivateCallback, &CPrintDialog::OnOK, (XtPointer) this);
	XtAddCallback (button34, XmNactivateCallback, &CPrintDialog::OnCancel, (XtPointer) this);
	XtAddCallback (button36, XmNactivateCallback, &CPrintDialog::OnHelp, (XtPointer) this);

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( printLabel, al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, printLabel); ac++;
	XtSetValues ( printCommand, al, ac );
	ac = 0;
	if ((children[ac] = printLabel) != (Widget) 0) { ac++; }
	if ((children[ac] = printCommand) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if ((children[ac] = printOKbutton) != (Widget) 0) { ac++; }
	if ((children[ac] = button34) != (Widget) 0) { ac++; }
	if ((children[ac] = button36) != (Widget) 0) { ac++; }
	if ((children[ac] = printForm) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
}

void CPrintDialog::OnHelp( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CPrintDialog_p instance = (CPrintDialog_p) client_data;
	instance->OnHelp ( widget, call_data );
}

void CPrintDialog::OnCancel( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CPrintDialog_p instance = (CPrintDialog_p) client_data;
	instance->OnCancel ( widget, call_data );
}

void CPrintDialog::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CPrintDialog_p instance = (CPrintDialog_p) client_data;
	instance->OnOK ( widget, call_data );
}


void COpenFileDialog::create (Widget parent, char *widget_name)
{
	Widget children[15];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget button66 = (Widget)NULL;
	Widget scrolledList4 = (Widget)NULL;
	Widget scrollbar10 = (Widget)NULL;
	Widget scrollbar11 = (Widget)NULL;
	Widget list4 = (Widget)NULL;
	Widget scrolledList5 = (Widget)NULL;
	Widget scrollbar12 = (Widget)NULL;
	Widget scrollbar13 = (Widget)NULL;
	Widget list5 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "openFileDialog";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	openFileDialog = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(openFileDialog, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = openFileDialog;
	initialise_objects ( openFileDialog );
	XtSetArg(al[ac], XmNwidth, 300); ac++;
	XtSetArg(al[ac], XmNdialogStyle, XmDIALOG_FULL_APPLICATION_MODAL); ac++;
	openFileFSB = XmCreateFileSelectionBox ( openFileDialog, (char *) "openFileFSB", al, ac );
	ac = 0;
	button66 = XtNameToWidget ( openFileFSB, "Help" );
	list4 = XtNameToWidget ( openFileFSB, "*ItemsList" );
	list5 = XtNameToWidget ( openFileFSB, "*DirList" );
	scrolledList4 = XtParent ( list4 );

	XtSetArg(al[ac], XmNhorizontalScrollBar, &scrollbar10); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &scrollbar11); ac++;
	XtGetValues(scrolledList4, al, ac );
	ac = 0;
	scrolledList5 = XtParent ( list5 );

	XtSetArg(al[ac], XmNhorizontalScrollBar, &scrollbar12); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &scrollbar13); ac++;
	XtGetValues(scrolledList5, al, ac );
	ac = 0;

	XtAddCallback (openFileFSB, XmNcancelCallback, &COpenFileDialog::OnCancel, (XtPointer) this);
	XtAddCallback (openFileFSB, XmNokCallback, &COpenFileDialog::OnOK, (XtPointer) this);
	XtAddCallback (button66, XmNactivateCallback, &COpenFileDialog::OnHelp, (XtPointer) this);
}

void COpenFileDialog::OnCancel( Widget widget, XtPointer client_data, XtPointer call_data )
{
	COpenFileDialog_p instance = (COpenFileDialog_p) client_data;
	instance->OnCancel ( widget, call_data );
}

void COpenFileDialog::OnHelp( Widget widget, XtPointer client_data, XtPointer call_data )
{
	COpenFileDialog_p instance = (COpenFileDialog_p) client_data;
	instance->OnHelp ( widget, call_data );
}

void COpenFileDialog::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	COpenFileDialog_p instance = (COpenFileDialog_p) client_data;
	instance->OnOK ( widget, call_data );
}


void COpenDbErrorAlert::create (Widget parent, char *widget_name)
{
	Widget children[6];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget button45 = (Widget)NULL;
	Widget button46 = (Widget)NULL;
	Widget button47 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "cantOpenShell";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	cantOpenShell = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(cantOpenShell, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = cantOpenShell;
	initialise_objects ( cantOpenShell );
	XtSetArg(al[ac], XmNdialogType, XmDIALOG_ERROR); ac++;
	cantOpenMB = XmCreateMessageBox ( cantOpenShell, (char *) "cantOpenMB", al, ac );
	ac = 0;
	button45 = XtNameToWidget ( cantOpenMB, "Cancel" );
	button46 = XtNameToWidget ( cantOpenMB, "Help" );
	button47 = XtNameToWidget ( cantOpenMB, "OK" );

	XtAddCallback (button47, XmNactivateCallback, &COpenDbErrorAlert::OnOK, (XtPointer) this);
	if (button45 != (Widget) 0) { XtUnmanageChild ( button45 ); }
	if (button46 != (Widget) 0) { XtUnmanageChild ( button46 ); }
}

void COpenDbErrorAlert::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	COpenDbErrorAlert_p instance = (COpenDbErrorAlert_p) client_data;
	instance->OnOK ( widget, call_data );
}


void CSysErrorAlert::create (Widget parent, char *widget_name)
{
	Widget children[6];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget button51 = (Widget)NULL;
	Widget button52 = (Widget)NULL;
	Widget button53 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "sysErrAlert";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	sysErrAlert = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(sysErrAlert, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = sysErrAlert;
	initialise_objects ( sysErrAlert );
	XtSetArg(al[ac], XmNdialogStyle, XmDIALOG_FULL_APPLICATION_MODAL); ac++;
	XtSetArg(al[ac], XmNdialogType, XmDIALOG_ERROR); ac++;
	sysErrorMB = XmCreateMessageBox ( sysErrAlert, (char *) "sysErrorMB", al, ac );
	ac = 0;
	button51 = XtNameToWidget ( sysErrorMB, "Cancel" );
	button52 = XtNameToWidget ( sysErrorMB, "Help" );
	messageLabel = XtNameToWidget ( sysErrorMB, "Message" );
	button53 = XtNameToWidget ( sysErrorMB, "OK" );

	XtAddCallback (button53, XmNactivateCallback, &CSysErrorAlert::OnOK, (XtPointer) this);
	if (button51 != (Widget) 0) { XtUnmanageChild ( button51 ); }
	if (button52 != (Widget) 0) { XtUnmanageChild ( button52 ); }
}

void CSysErrorAlert::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CSysErrorAlert_p instance = (CSysErrorAlert_p) client_data;
	instance->OnOK ( widget, call_data );
}


void CFindAlert::create (Widget parent, char *widget_name)
{
	Widget children[6];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget button57 = (Widget)NULL;
	Widget button58 = (Widget)NULL;
	Widget button59 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "findAlert";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	findAlert = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(findAlert, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = findAlert;
	initialise_objects ( findAlert );
	XtSetArg(al[ac], XmNdialogType, XmDIALOG_INFORMATION); ac++;
	noItemsFoundMB = XmCreateMessageBox ( findAlert, (char *) "noItemsFoundMB", al, ac );
	ac = 0;
	button57 = XtNameToWidget ( noItemsFoundMB, "Cancel" );
	button58 = XtNameToWidget ( noItemsFoundMB, "Help" );
	button59 = XtNameToWidget ( noItemsFoundMB, "OK" );

	XtAddCallback (button59, XmNactivateCallback, &CFindAlert::OnOK, (XtPointer) this);
	if (button57 != (Widget) 0) { XtUnmanageChild ( button57 ); }
	if (button58 != (Widget) 0) { XtUnmanageChild ( button58 ); }
}

void CFindAlert::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CFindAlert_p instance = (CFindAlert_p) client_data;
	instance->OnOK ( widget, call_data );
}


void CFindDialog::create (Widget parent, char *widget_name)
{
	Widget children[5];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */

	if ( !widget_name )
		widget_name = (char *) "findDialog";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	findDialog = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(findDialog, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = findDialog;
	initialise_objects ( findDialog );
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	XtSetArg(al[ac], XmNdialogType, XmDIALOG_TEMPLATE); ac++;
	findDT = XmCreateMessageBox ( findDialog, (char *) "findDT", al, ac );
	ac = 0;
	findButton = XmCreatePushButton ( findDT, (char *) "findButton", al, ac );
	closeButton = XmCreatePushButton ( findDT, (char *) "closeButton", al, ac );
	helpButton = XmCreatePushButton ( findDT, (char *) "helpButton", al, ac );
	findText = XmCreateTextField ( findDT, (char *) "findText", al, ac );
	XtSetArg(al[ac], XmNdefaultButton, findButton); ac++;
	if (findDT)
		XtSetValues ( findDT, al, ac );
	ac = 0;

	XtAddCallback (findButton, XmNactivateCallback, &CFindDialog::OnFind, (XtPointer) this);
	XtAddCallback (closeButton, XmNactivateCallback, &CFindDialog::OnClose, (XtPointer) this);
	XtAddCallback (helpButton, XmNactivateCallback, &CFindDialog::OnHelp, (XtPointer) this);
	if ((children[ac] = findButton) != (Widget) 0) { ac++; }
	if ((children[ac] = closeButton) != (Widget) 0) { ac++; }
	if ((children[ac] = helpButton) != (Widget) 0) { ac++; }
	if ((children[ac] = findText) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
}

void CFindDialog::OnHelp( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CFindDialog_p instance = (CFindDialog_p) client_data;
	instance->OnHelp ( widget, call_data );
}

void CFindDialog::OnClose( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CFindDialog_p instance = (CFindDialog_p) client_data;
	instance->OnClose ( widget, call_data );
}

void CFindDialog::OnFind( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CFindDialog_p instance = (CFindDialog_p) client_data;
	instance->OnFind ( widget, call_data );
}


void CSaveFileDialog::create (Widget parent, char *widget_name)
{
	Widget children[15];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget button68 = (Widget)NULL;
	Widget button69 = (Widget)NULL;
	Widget scrolledList6 = (Widget)NULL;
	Widget scrollbar14 = (Widget)NULL;
	Widget scrollbar1 = (Widget)NULL;
	Widget list6 = (Widget)NULL;
	Widget scrolledList1 = (Widget)NULL;
	Widget scrollbar2 = (Widget)NULL;
	Widget scrollbar3 = (Widget)NULL;
	Widget list2 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "saveFileDialog";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	saveFileDialog = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(saveFileDialog, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = saveFileDialog;
	initialise_objects ( saveFileDialog );
	XtSetArg(al[ac], XmNwidth, 300); ac++;
	XtSetArg(al[ac], XmNdialogStyle, XmDIALOG_FULL_APPLICATION_MODAL); ac++;
	saveFileFSB = XmCreateFileSelectionBox ( saveFileDialog, (char *) "saveFileFSB", al, ac );
	ac = 0;
	button68 = XtNameToWidget ( saveFileFSB, "Cancel" );
	button69 = XtNameToWidget ( saveFileFSB, "Help" );
	list6 = XtNameToWidget ( saveFileFSB, "*ItemsList" );
	list2 = XtNameToWidget ( saveFileFSB, "*DirList" );
	scrolledList6 = XtParent ( list6 );

	XtSetArg(al[ac], XmNhorizontalScrollBar, &scrollbar14); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &scrollbar1); ac++;
	XtGetValues(scrolledList6, al, ac );
	ac = 0;
	scrolledList1 = XtParent ( list2 );

	XtSetArg(al[ac], XmNhorizontalScrollBar, &scrollbar2); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &scrollbar3); ac++;
	XtGetValues(scrolledList1, al, ac );
	ac = 0;

	XtAddCallback (saveFileFSB, XmNokCallback, &CSaveFileDialog::OnOK, (XtPointer) this);
	XtAddCallback (button68, XmNactivateCallback, &CSaveFileDialog::OnCancel, (XtPointer) this);
	XtAddCallback (button69, XmNactivateCallback, &CSaveFileDialog::OnHelp, (XtPointer) this);
}

void CSaveFileDialog::OnCancel( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CSaveFileDialog_p instance = (CSaveFileDialog_p) client_data;
	instance->OnCancel ( widget, call_data );
}

void CSaveFileDialog::OnHelp( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CSaveFileDialog_p instance = (CSaveFileDialog_p) client_data;
	instance->OnHelp ( widget, call_data );
}

void CSaveFileDialog::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CSaveFileDialog_p instance = (CSaveFileDialog_p) client_data;
	instance->OnOK ( widget, call_data );
}


void CHistoryDialog::create (Widget parent, char *widget_name)
{
	Widget children[5];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget scrolledList2 = (Widget)NULL;
	Widget scrollbar4 = (Widget)NULL;
	Widget scrollbar5 = (Widget)NULL;
	Widget button72 = (Widget)NULL;
	Widget button74 = (Widget)NULL;

	if ( !widget_name )
		widget_name = (char *) "historyShell";

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	historyShell = XmCreateDialogShell ( parent, widget_name, al, ac );
	if (xd_tooltip == (Widget) 0) {
		xd_tooltip = XmCreateToolTip(historyShell, "tooltip", (Arg *) 0, (Cardinal) 0) ;
	}
	ac = 0;
	_xd_rootwidget = historyShell;
	initialise_objects ( historyShell );
	XtSetArg(al[ac], XmNwidth, 300); ac++;
	XtSetArg(al[ac], XmNheight, 180); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	XtSetArg(al[ac], XmNdialogType, XmDIALOG_TEMPLATE); ac++;
	historyForm = XmCreateMessageBox ( historyShell, (char *) "historyForm", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNlistSizePolicy, XmCONSTANT); ac++;
	historyList = XmCreateScrolledList ( historyForm, (char *) "historyList", al, ac );
	ac = 0;
	scrolledList2 = XtParent ( historyList );

	XtSetArg(al[ac], XmNhorizontalScrollBar, &scrollbar4); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &scrollbar5); ac++;
	XtGetValues(scrolledList2, al, ac );
	ac = 0;
	gotoButton = XmCreatePushButton ( historyForm, (char *) "gotoButton", al, ac );
	button72 = XmCreatePushButton ( historyForm, (char *) "closeButton", al, ac );
	button74 = XmCreatePushButton ( historyForm, (char *) "helpButton", al, ac );
	XtSetArg(al[ac], XmNdefaultButton, gotoButton); ac++;
	if (historyForm)
		XtSetValues ( historyForm, al, ac );
	ac = 0;

	XtAddCallback (historyList, XmNdefaultActionCallback, &CHistoryDialog::OnOK, (XtPointer) this);
	if (historyList != (Widget) 0) { XtManageChild(historyList); }
	XtAddCallback (gotoButton, XmNactivateCallback, &CHistoryDialog::OnOK, (XtPointer) this);
	XtAddCallback (button72, XmNactivateCallback, &CHistoryDialog::OnCancel, (XtPointer) this);
	XtAddCallback (button74, XmNactivateCallback, &CHistoryDialog::OnHelp, (XtPointer) this);
	if ((children[ac] = gotoButton) != (Widget) 0) { ac++; }
	if ((children[ac] = button72) != (Widget) 0) { ac++; }
	if ((children[ac] = button74) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
}

void CHistoryDialog::OnHelp( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CHistoryDialog_p instance = (CHistoryDialog_p) client_data;
	instance->OnHelp ( widget, call_data );
}

void CHistoryDialog::OnCancel( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CHistoryDialog_p instance = (CHistoryDialog_p) client_data;
	instance->OnCancel ( widget, call_data );
}

void CHistoryDialog::OnOK( Widget widget, XtPointer client_data, XtPointer call_data )
{
	CHistoryDialog_p instance = (CHistoryDialog_p) client_data;
	instance->OnOK ( widget, call_data );
}

