

mttest example program:

Description: 

        The program mttest is a simple program that exercises various
        synchronization options on dummy data.

        It can be used to explore the Sun ONE Studio Performance Tools,
        in particular, to test threaded programs and to test the
        measurement of synchronization delay.  It can be built to use
        either POSIX threads or Solaris threads.

Makefile:

        make: make the executable mttest.

        make collect: collect two data sets with 4 and 1 processors.

        make clean: remove .o files and core files.

        make clobber: make clean and remove executable and experiment files.

        The default is to make with bound Solaris threads. Use the THREADS
        variable in the Makefile to choose the threads standard, and use the 
        FLAG variable to select bound or unbound threads.

        Notes: 
        (1) A make clobber should be done before building and running
        this program, to clean up any unwanted files. 
        (2) The makefile has a variety of options commented out which control
        the optimization of the program.

Usage:

        mttest [-u]

        The -u option binds all LWPs to a single processor.
                
Example Scenario:

	NOTE: You must have access to a computer with at least 4 processors to
	run the default example.

        Step 1: Make a copy of the program and Makefile.

        Copy the contents of the mttest directory to your own
        private working area with the following command:

                cp -r /opt/SUNWspro/examples/analyzer/mttest <myworkarea>/mttest

        Note: /opt/SUNWspro is the base directory where the product is
        installed. This directory may be different in your environment.

        Step 2: Build the mttest executable.

                cd <myworkarea>/mttest
                make

        Step 3: Collect performance data

                make collect

        This produces two experiments, one called mttest.4.er which is run 
        on 4 CPUs, and one called mttest.1.er which is run on 1 CPU. Both 
        experiments have 4 threads.

        Step 4: Analyze the performance data

        If you have a license for the GUI, type

                analyzer <experiment> &

	where <experiment> is one or more of the experiments listed above.

	If you do not have the appropriate license, you can use er_print to
	analyze the performance data:

                er_print <experiment> &

        From this point you can explore the features of the Analyzer and 
        the performance of the mttest program.

Copyright © 2004 Sun Microsystems, Inc.
4150 Network Circle, Santa Clara,California 95054, U.S.A.  
All rights reserved.

